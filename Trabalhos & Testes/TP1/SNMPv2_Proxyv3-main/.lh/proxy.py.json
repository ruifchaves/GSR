{
    "sourceFile": "proxy.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 156,
            "patches": [
                {
                    "date": 1658398997617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1658500949721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import threading, os, socket, json\n+\n+\n+\n+class RequestHandler(threading.Thread):\n+    def __init__(self):\n+        self.port = 161\n+        self.ip = '127.0.0.3'\n+        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n+        self.socket.bind((self.ip, self.port))\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.agentIp = \"127.0.0.2\"\n+        self.MIB = dict()\n+        self.clients = dict()\n+        \n+    def populateMIBsAndCfg(self):\n+        self.MIB = json.load(open(\"MIBProxy.json\"))\n+        self.clients = json.load(open(\"AutorizedUsers.json\"))\n+        \n+    def run(self):\n+        while True:\n+            data, addr = self.socket.recvfrom(4096)\n+            data = data.decode()\n+            if addr[0] == self.agentIp and addr[1] == self.port:\n+                print(\"Received  from agent\")\n+                \n+                \n+                \n+            elif data.split('%')[0] not in self.clients:\n+                data = data.decode()\n+                if data.split('%')[0] == \"login\":\n+                    response = \"Introduza o seu username: \"\n+                    self.socket.sendto(response.encode(), (addr[0], self.port))\n+                elif data.split('%')[0] == \"username\":\n+                    \n+\n+\n+def main():\n+    print(\"Bem-Vindo ao SNMP Proxy\")\n+    print(\"A inicializar MIBs, endpoints e threads..\")\n+    \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658501050653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.agentIp = \"127.0.0.2\"\n         self.MIB = dict()\n         self.clients = dict()\n+        self.clientsIP = []\n         \n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"AutorizedUsers.json\"))\n@@ -26,10 +27,9 @@\n                 \n                 \n                 \n             elif data.split('%')[0] not in self.clients:\n-                data = data.decode()\n-                if data.split('%')[0] == \"login\":\n+                if data.split('%')[1] == \"login\":\n                     response = \"Introduza o seu username: \"\n                     self.socket.sendto(response.encode(), (addr[0], self.port))\n                 elif data.split('%')[0] == \"username\":\n                     \n"
                },
                {
                    "date": 1658501066775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n                 print(\"Received  from agent\")\n                 \n                 \n                 \n-            elif data.split('%')[0] not in self.clients:\n+            elif addr[0] not in self.clientsIP:\n                 if data.split('%')[1] == \"login\":\n                     response = \"Introduza o seu username: \"\n                     self.socket.sendto(response.encode(), (addr[0], self.port))\n                 elif data.split('%')[0] == \"username\":\n"
                },
                {
                    "date": 1658501091609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n                 if data.split('%')[1] == \"login\":\n                     response = \"Introduza o seu username: \"\n                     self.socket.sendto(response.encode(), (addr[0], self.port))\n                 elif data.split('%')[0] == \"username\":\n+                    username = data.split('%')[1]\n                     \n \n \n def main():\n"
                },
                {
                    "date": 1658501656795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         self.agentIp = \"127.0.0.2\"\n         self.MIB = dict()\n         self.clients = dict()\n         self.clientsIP = []\n+        self.clientsUsers = []\n         \n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"AutorizedUsers.json\"))\n@@ -32,8 +33,20 @@\n                     response = \"Introduza o seu username: \"\n                     self.socket.sendto(response.encode(), (addr[0], self.port))\n                 elif data.split('%')[0] == \"username\":\n                     username = data.split('%')[1]\n+                    response = \"Introduza o seu password: \"\n+                    self.socket.sendto(response.encode(), (addr[0], self.port))\n+                elif data.split('%')[0] == \"password\":\n+                    password = data.split('%')[1]\n+                    if username in self.clients and self.clients[username][password] == password:\n+                        response = \"login successful\"\n+                        self.clientsIP.append(addr[0])\n+                        self.socket.sendto(response.encode(), (addr[0], self.port))\n+            elif addr[0] in self.clientsIP:\n+                if data.split('%')[1] == \"get-request\":\n+                    oid = data.split('%')[2]\n+                    self.handleOID(oid, self.clients)\n                     \n \n \n def main():\n"
                },
                {
                    "date": 1658501668655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n                     password = data.split('%')[1]\n                     if username in self.clients and self.clients[username][password] == password:\n                         response = \"login successful\"\n                         self.clientsIP.append(addr[0])\n+                        self.clientsUsers.append(username)\n                         self.socket.sendto(response.encode(), (addr[0], self.port))\n             elif addr[0] in self.clientsIP:\n                 if data.split('%')[1] == \"get-request\":\n                     oid = data.split('%')[2]\n"
                },
                {
                    "date": 1658561243120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,38 +19,27 @@\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"AutorizedUsers.json\"))\n         \n     def run(self):\n+        self.populateMIBsAndCfg()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n-            if addr[0] == self.agentIp and addr[1] == self.port:\n-                print(\"Received  from agent\")\n-                \n-                \n-                \n-            elif addr[0] not in self.clientsIP:\n-                if data.split('%')[1] == \"login\":\n-                    response = \"Introduza o seu username: \"\n-                    self.socket.sendto(response.encode(), (addr[0], self.port))\n-                elif data.split('%')[0] == \"username\":\n-                    username = data.split('%')[1]\n-                    response = \"Introduza o seu password: \"\n-                    self.socket.sendto(response.encode(), (addr[0], self.port))\n-                elif data.split('%')[0] == \"password\":\n-                    password = data.split('%')[1]\n-                    if username in self.clients and self.clients[username][password] == password:\n-                        response = \"login successful\"\n-                        self.clientsIP.append(addr[0])\n-                        self.clientsUsers.append(username)\n-                        self.socket.sendto(response.encode(), (addr[0], self.port))\n-            elif addr[0] in self.clientsIP:\n-                if data.split('%')[1] == \"get-request\":\n-                    oid = data.split('%')[2]\n-                    self.handleOID(oid, self.clients)\n+            if addr[0] not in self.clientsIP:\n+                    if data.split(' ')[0] == \"login\":\n+                        self.socket.sendto(\"Username?\".encode(), addr)\n+                    elif data.split(' ')[0] == \"username\":\n+                        username = data.split(' ')[1]\n+                        self.socket.sendto(\"Password?\".encode(), addr)\n+                    elif data.split(' ')[0] == \"password\":\n+                        password = data.split(' ')[1]\n+                        if self.clients[username][password] == password:\n+                            print(\"Login Success from \" + addr[0] + \" with username \" + username)\n+                            self.socket.sendto(\"login-ack\".encode(), addr)\n+            else:\n+                self.processRequest(data, addr)\n                     \n \n-\n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     print(\"A inicializar MIBs, endpoints e threads..\")\n     \n"
                },
                {
                    "date": 1658562352552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n \n \n class RequestHandler(threading.Thread):\n-    def __init__(self):\n+    def __init__(self, cstring):\n         self.port = 161\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n@@ -13,13 +13,53 @@\n         self.MIB = dict()\n         self.clients = dict()\n         self.clientsIP = []\n         self.clientsUsers = []\n-        \n+        self.idCounter = 0\n+        self.cstring = cstring\n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"AutorizedUsers.json\"))\n         \n+        \n+    def getUsername(self, addr):\n+        \"\"\"\n+        search the self.clients dictionary which has the following format\n+        {\n+            \"adminTeste\":{\n+            \"username\":\"adminTeste\",\n+            \"password\":\"password\",\n+            \"status\": \"0\",\n+            \"IP\": \"\"\n+            },\n+            ...\n+        }\n+        and return the username associated with the IP addr\n+        \"\"\"\n+        for key in self.clients:\n+            if self.clients[key][\"IP\"] == addr:\n+                return key\n+        return None\n+        \n+        \n+    def processRequest(self, data, addr):\n+          \n+          idOper = self.idCounter\n+          self.idCounter += 1\n+          typeOper = data.split(' ')[0]\n+          idSource = self.getUsername(addr[0])\n+          idDestination = self.agentIp()\n+          oidArg = data.split(' ')[1]\n+          valueArg = \" \"\n+          typeArg = \"STRING\"\n+          sizeArg = \"\"          \n+        \n+    \n+    def requestToAgent(self, oid, typeOper):\n+          \n+          \n+        \n+        \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658562394708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,11 @@\n           sizeArg = \"\"          \n         \n     \n     def requestToAgent(self, oid, typeOper):\n+          request = self.cstring + \" \" + typeOper + \" \" + oid\n+          self.socket.sendto(request.encode(), (self.agentIp, self.port))\n           \n-          \n         \n         \n     def run(self):\n         self.populateMIBsAndCfg()\n"
                },
                {
                    "date": 1658562468388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,12 @@\n           sizeArg = \"\"          \n         \n     \n     def requestToAgent(self, oid, typeOper):\n-          request = self.cstring + \" \" + typeOper + \" \" + oid\n-          self.socket.sendto(request.encode(), (self.agentIp, self.port))\n-          \n+        request = self.cstring + \" \" + typeOper + \" \" + oid \n+        self.socket.sendto(request.encode(), (self.agentIp, self.port))\n+            while True:\n+                data,addr = self.socket.recvfrom(4096)\n         \n         \n     def run(self):\n         self.populateMIBsAndCfg()\n"
                },
                {
                    "date": 1658562505355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,13 @@\n     \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n-            while True:\n-                data,addr = self.socket.recvfrom(4096)\n+        while True:\n+            data,addr = self.socket.recvfrom(4096)\n+            if addr[0] == self.agentIp:\n+                agentResponse = data.decode()\n+        return agentResponse\n         \n         \n     def run(self):\n         self.populateMIBsAndCfg()\n"
                },
                {
                    "date": 1658562512715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data.decode()\n+                break\n         return agentResponse\n         \n         \n     def run(self):\n"
                },
                {
                    "date": 1658562537847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,16 +52,17 @@\n           valueArg = \" \"\n           typeArg = \"STRING\"\n           sizeArg = \"\"          \n         \n+          \n     \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n-                agentResponse = data.decode()\n+                agentResponse = data\n                 break\n         return agentResponse\n         \n         \n"
                },
                {
                    "date": 1658562762868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,20 +42,29 @@\n         \n         \n     def processRequest(self, data, addr):\n           \n-          idOper = self.idCounter\n-          self.idCounter += 1\n-          typeOper = data.split(' ')[0]\n-          idSource = self.getUsername(addr[0])\n-          idDestination = self.agentIp()\n-          oidArg = data.split(' ')[1]\n-          valueArg = \" \"\n-          typeArg = \"STRING\"\n-          sizeArg = \"\"          \n-        \n-          \n-    \n+        idOper = self.idCounter\n+        self.idCounter += 1\n+        typeOper = data.split(' ')[0]\n+        idSource = self.getUsername(addr[0])\n+        idDestination = self.agentIp()\n+        oidArg = data.split(' ')[1]\n+        valueArg = \" \"\n+        typeArg = \"STRING\"\n+        sizeArg = \"\"          \n+        response = self.requestToAgent(oidArg, typeOper)\n+        valueArg = response\n+        sizeArg = len(valueArg)\n+        self.MIB[\"Lines\"][\"1\"][self.idCounter] = idOper\n+        self.MIB[\"Lines\"][\"2\"][self.idCounter] = typeOper\n+        self.MIB[\"Lines\"][\"3\"][self.idCounter] = idSource\n+        self.MIB[\"Lines\"][\"4\"][self.idCounter] = idDestination\n+        self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n+        self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n+        self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n+        self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n+        json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w\"))\n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n"
                },
                {
                    "date": 1658562835106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import threading, os, socket, json\n \n \n \n-class RequestHandler(threading.Thread):\n+class RequestHandler():\n     def __init__(self, cstring):\n         self.port = 161\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n@@ -15,8 +15,10 @@\n         self.clientsIP = []\n         self.clientsUsers = []\n         self.idCounter = 0\n         self.cstring = cstring\n+        self.run()\n+        \n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"AutorizedUsers.json\"))\n         \n@@ -63,8 +65,9 @@\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w\"))\n+        \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n@@ -96,7 +99,7 @@\n                     \n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n-    print(\"A inicializar MIBs, endpoints e threads..\")\n     \n+    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658562854088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,7 +99,7 @@\n                     \n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n+    requestHandler = RequestHandler(\"gsr2022\")\n     \n-    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658562867105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,5 +101,10 @@\n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr2022\")\n     \n+if __name__ == \"__main__\":\n+    main()\n+    #requestHandler = RequestHandler(\"gsr2022\")\n+    #requestHandler.run()\n+    #requestHandler.processRequest(\"get\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658563511435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n                         if self.clients[username][password] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n+                self.socket.sendto(\"ack\".encode(), addr)\n                 self.processRequest(data, addr)\n                     \n \n def main():\n"
                },
                {
                    "date": 1658563658743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w\"))\n         \n+        \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n@@ -76,8 +77,14 @@\n                 agentResponse = data\n                 break\n         return agentResponse\n         \n+    def responseToManager(self, response):\n+        self.socket.sendto(response.encode(), (self.ip, self.port))\n+        while True:\n+            data, addr = self.socket.recvfrom(4096)\n+            if data.decode() == \"ack\":\n+                break\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n"
                },
                {
                    "date": 1658563667205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,10 @@\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w\"))\n+        self.responseToManager(response)\n         \n-        \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n@@ -84,8 +84,9 @@\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n         \n+        \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658563730587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w\"))\n-        self.responseToManager(response)\n+        self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n@@ -77,10 +77,10 @@\n                 agentResponse = data\n                 break\n         return agentResponse\n         \n-    def responseToManager(self, response):\n-        self.socket.sendto(response.encode(), (self.ip, self.port))\n+    def responseToManager(self, response, addr):\n+        self.socket.sendto(response.encode(), (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658565055039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         self.run()\n         \n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n-        self.clients = json.load(open(\"AutorizedUsers.json\"))\n+        self.clients = json.load(open(\"autorizedUsers.json\"))\n         \n         \n     def getUsername(self, addr):\n         \"\"\"\n"
                },
                {
                    "date": 1658565065784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         self.run()\n         \n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n-        self.clients = json.load(open(\"autorizedUsers.json\"))\n+        self.clients = json.load(open(\"authorizedUsers.json\"))\n         \n         \n     def getUsername(self, addr):\n         \"\"\"\n"
                },
                {
                    "date": 1658565735184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n                         username = data.split(' ')[1]\n                         self.socket.sendto(\"Password?\".encode(), addr)\n                     elif data.split(' ')[0] == \"password\":\n                         password = data.split(' ')[1]\n-                        if self.clients[username][password] == password:\n+                        if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n"
                },
                {
                    "date": 1658565814842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,9 @@\n                         username = data.split(' ')[1]\n                         self.socket.sendto(\"Password?\".encode(), addr)\n                     elif data.split(' ')[0] == \"password\":\n                         password = data.split(' ')[1]\n+                        print(self.clients())\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n"
                },
                {
                    "date": 1658565887046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,8 @@\n                         username = data.split(' ')[1]\n                         self.socket.sendto(\"Password?\".encode(), addr)\n                     elif data.split(' ')[0] == \"password\":\n                         password = data.split(' ')[1]\n-                        print(self.clients())\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n"
                },
                {
                    "date": 1658565924999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n                     \n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n-    requestHandler = RequestHandler(\"gsr2022\")\n+    requestHandler = RequestHandler(\"gsr\")\n     \n if __name__ == \"__main__\":\n     main()\n     #requestHandler = RequestHandler(\"gsr2022\")\n"
                },
                {
                    "date": 1658565986442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n+                print(data.decode())\n                 self.processRequest(data, addr)\n                     \n \n def main():\n"
                },
                {
                    "date": 1658565994789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n-                print(data.decode())\n+                print(\"Pedido recebido: \" + data.decode())\n                 self.processRequest(data, addr)\n                     \n \n def main():\n"
                },
                {
                    "date": 1658566033433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,9 @@\n                     elif data.split(' ')[0] == \"password\":\n                         password = data.split(' ')[1]\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n+                            self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data.decode())\n"
                },
                {
                    "date": 1658566059698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n-                print(\"Pedido recebido: \" + data.decode())\n+                print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr)\n                     \n \n def main():\n"
                },
                {
                    "date": 1658566104777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         idOper = self.idCounter\n         self.idCounter += 1\n         typeOper = data.split(' ')[0]\n         idSource = self.getUsername(addr[0])\n-        idDestination = self.agentIp()\n+        idDestination = self.agentIp\n         oidArg = data.split(' ')[1]\n         valueArg = \" \"\n         typeArg = \"STRING\"\n         sizeArg = \"\"          \n"
                },
                {
                    "date": 1658566179690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n         self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n+        print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n"
                },
                {
                    "date": 1658571430554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n-        json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w\"))\n+        json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w+\"))\n         self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n"
                },
                {
                    "date": 1658571479379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n-        json.dump(self.MIB, open(\"/debug/MIBProxy.json\", \"w+\"))\n+        #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n         self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n"
                },
                {
                    "date": 1658571523708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                 break\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n-        self.socket.sendto(response.encode(), (addr, self.port))\n+        self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658578081969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data\n                 break\n+        print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n         self.socket.sendto(response, (addr, self.port))\n"
                },
                {
                    "date": 1658578091796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n-        self.socket.sendto(response, (addr, self.port))\n+        self.socket.sendto(response.encode(), (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658578152161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n-        self.socket.sendto(response.encode(), (addr, self.port))\n+        self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658578423262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n-                agentResponse = data\n+                agentResponse = data.decode()\n                 break\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n"
                },
                {
                    "date": 1658578430096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n-        self.socket.sendto(response, (addr, self.port))\n+        self.socket.sendto(response.encode(), (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658578492415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,15 +74,15 @@\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n-                agentResponse = data.decode()\n+                agentResponse = data\n                 break\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n-        self.socket.sendto(response.encode(), (addr, self.port))\n+        self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658578504312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n+        responde = responde.decode()\n         self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n"
                },
                {
                    "date": 1658578547407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n-        responde = responde.decode()\n+        responde = response.decode()\n         self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n@@ -81,8 +81,9 @@\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n+        print(\"Response to Manager: \" + response.decode())\n         self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n"
                },
                {
                    "date": 1658578553574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         print(\"Agent Response: \" + agentResponse.decode())\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n-        print(\"Response to Manager: \" + response.decode())\n+        print(\"Response to Manager: \" + response)\n         self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n"
                },
                {
                    "date": 1658578592845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n-        responde = response.decode()\n+        response = response.decode()\n         self.responseToManager(response, addr)\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n"
                },
                {
                    "date": 1658578639143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n         print(\"Response to Manager: \" + response)\n-        self.socket.sendto(response, (addr, self.port))\n+        self.socket.sendto(response.encode(), (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658578683220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n         #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n         response = response.decode()\n-        self.responseToManager(response, addr)\n+        self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         print(request)\n"
                },
                {
                    "date": 1658580787996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,9 @@\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n+            print(\"À espera de pedidos...\")\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n             if addr[0] not in self.clientsIP:\n                     if data.split(' ')[0] == \"login\":\n"
                },
                {
                    "date": 1658580875334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,8 @@\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n-            print(\"À espera de pedidos...\")\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n             if addr[0] not in self.clientsIP:\n                     if data.split(' ')[0] == \"login\":\n"
                },
                {
                    "date": 1658580889324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr)\n-                    \n+                break    \n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n"
                },
                {
                    "date": 1658580895868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,10 +87,10 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n+        self.run()\n         \n-        \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658580916786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,8 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n-        self.run()\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n         while True:\n"
                },
                {
                    "date": 1658580951900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n             if addr[0] not in self.clientsIP:\n-                    if data.split(' ')[0] == \"login\":\n+                    if data.split(' ')[0] == \"ogin\":\n                         self.socket.sendto(\"Username?\".encode(), addr)\n                     elif data.split(' ')[0] == \"username\":\n                         username = data.split(' ')[1]\n                         self.socket.sendto(\"Password?\".encode(), addr)\n@@ -108,10 +108,9 @@\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n-                self.processRequest(data, addr)\n-                break    \n+                self.processRequest(data, addr) \n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n"
                },
                {
                    "date": 1658580972234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n             if addr[0] not in self.clientsIP:\n-                    if data.split(' ')[0] == \"ogin\":\n+                    if data.split(' ')[0] == \"login\":\n                         self.socket.sendto(\"Username?\".encode(), addr)\n                     elif data.split(' ')[0] == \"username\":\n                         username = data.split(' ')[1]\n                         self.socket.sendto(\"Password?\".encode(), addr)\n"
                },
                {
                    "date": 1658581071116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n-        #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n+        json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n         response = response.decode()\n         self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n"
                },
                {
                    "date": 1658581148836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n         self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n         self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n         self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n-        json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n+        #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n         response = response.decode()\n         self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n"
                },
                {
                    "date": 1658661192698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,20 @@\n         sizeArg = \"\"          \n         response = self.requestToAgent(oidArg, typeOper)\n         valueArg = response\n         sizeArg = len(valueArg)\n+        \n+        print(\"idOper: \" + str(idOper))\n+        print(\"typeOper: \" + typeOper)\n+        print(\"idSource: \" + idSource)\n+        print(\"idDestination: \" + idDestination)\n+        print(\"oidArg: \" + oidArg)\n+        print(\"valueArg: \" + valueArg)\n+        print(\"typeArg: \" + typeArg)\n+        print(\"sizeArg: \" + str(sizeArg))\n+        print(\"----------------------------------------------------\")\n+        \n+        \n         self.MIB[\"Lines\"][\"1\"][self.idCounter] = idOper\n         self.MIB[\"Lines\"][\"2\"][self.idCounter] = typeOper\n         self.MIB[\"Lines\"][\"3\"][self.idCounter] = idSource\n         self.MIB[\"Lines\"][\"4\"][self.idCounter] = idDestination\n"
                },
                {
                    "date": 1658661267505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         valueArg = \" \"\n         typeArg = \"STRING\"\n         sizeArg = \"\"          \n         response = self.requestToAgent(oidArg, typeOper)\n-        valueArg = response\n+        valueArg = str(response)\n         sizeArg = len(valueArg)\n         \n         print(\"idOper: \" + str(idOper))\n         print(\"typeOper: \" + typeOper)\n"
                },
                {
                    "date": 1658661451725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,10 @@\n         return None\n         \n         \n     def processRequest(self, data, addr):\n-          \n+        self.idCounter += 1 \n         idOper = self.idCounter\n-        self.idCounter += 1\n         typeOper = data.split(' ')[0]\n         idSource = self.getUsername(addr[0])\n         idDestination = self.agentIp\n         oidArg = data.split(' ')[1]\n"
                },
                {
                    "date": 1658661482611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     def processRequest(self, data, addr):\n         self.idCounter += 1 \n         idOper = self.idCounter\n         typeOper = data.split(' ')[0]\n-        idSource = self.getUsername(addr[0])\n+        idSource = str(self.getUsername(addr[0]))\n         idDestination = self.agentIp\n         oidArg = data.split(' ')[1]\n         valueArg = \" \"\n         typeArg = \"STRING\"\n"
                },
                {
                    "date": 1658661667279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,44 +43,49 @@\n         return None\n         \n         \n     def processRequest(self, data, addr):\n-        self.idCounter += 1 \n-        idOper = self.idCounter\n-        typeOper = data.split(' ')[0]\n-        idSource = str(self.getUsername(addr[0]))\n-        idDestination = self.agentIp\n-        oidArg = data.split(' ')[1]\n-        valueArg = \" \"\n-        typeArg = \"STRING\"\n-        sizeArg = \"\"          \n-        response = self.requestToAgent(oidArg, typeOper)\n-        valueArg = str(response)\n-        sizeArg = len(valueArg)\n+        try:\n+            self.idCounter += 1 \n+            idOper = self.idCounter\n+            typeOper = data.split(' ')[0]\n+            idSource = str(self.getUsername(addr[0]))\n+            idDestination = str(self.agentIp)\n+            oidArg = data.split(' ')[1]\n+            valueArg = \" \"\n+            typeArg = \"STRING\"\n+            sizeArg = \"\"          \n+            response = self.requestToAgent(oidArg, typeOper)\n+            valueArg = str(response)\n+            sizeArg = len(valueArg)\n+            \n+            print(\"idOper: \" + str(idOper))\n+            print(\"typeOper: \" + typeOper)\n+            print(\"idSource: \" + idSource)\n+            print(\"idDestination: \" + idDestination)\n+            print(\"oidArg: \" + oidArg)\n+            print(\"valueArg: \" + valueArg)\n+            print(\"typeArg: \" + typeArg)\n+            print(\"sizeArg: \" + str(sizeArg))\n+            print(\"----------------------------------------------------\")\n+            \n+            \n+            self.MIB[\"Lines\"][\"1\"][self.idCounter] = idOper\n+            self.MIB[\"Lines\"][\"2\"][self.idCounter] = typeOper\n+            self.MIB[\"Lines\"][\"3\"][self.idCounter] = idSource\n+            self.MIB[\"Lines\"][\"4\"][self.idCounter] = idDestination\n+            self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n+            self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n+            self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n+            self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n+            #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n+            response = response.decode()\n+            self.responseToManager(response, addr[0])\n+        except:\n+            print(\"Invalid Synthax!\")\n+            response = \"Invalid Synthax!\"\n+            self.responseToManager(response, addr[0])\n         \n-        print(\"idOper: \" + str(idOper))\n-        print(\"typeOper: \" + typeOper)\n-        print(\"idSource: \" + idSource)\n-        print(\"idDestination: \" + idDestination)\n-        print(\"oidArg: \" + oidArg)\n-        print(\"valueArg: \" + valueArg)\n-        print(\"typeArg: \" + typeArg)\n-        print(\"sizeArg: \" + str(sizeArg))\n-        print(\"----------------------------------------------------\")\n-        \n-        \n-        self.MIB[\"Lines\"][\"1\"][self.idCounter] = idOper\n-        self.MIB[\"Lines\"][\"2\"][self.idCounter] = typeOper\n-        self.MIB[\"Lines\"][\"3\"][self.idCounter] = idSource\n-        self.MIB[\"Lines\"][\"4\"][self.idCounter] = idDestination\n-        self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n-        self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n-        self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n-        self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n-        #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n-        response = response.decode()\n-        self.responseToManager(response, addr[0])\n-        \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n"
                },
                {
                    "date": 1658661996699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,20 +45,31 @@\n         \n     def processRequest(self, data, addr):\n         try:\n             self.idCounter += 1 \n-            idOper = self.idCounter\n-            typeOper = data.split(' ')[0]\n-            idSource = str(self.getUsername(addr[0]))\n-            idDestination = str(self.agentIp)\n-            oidArg = data.split(' ')[1]\n-            valueArg = \" \"\n-            typeArg = \"STRING\"\n-            sizeArg = \"\"          \n-            response = self.requestToAgent(oidArg, typeOper)\n-            valueArg = str(response)\n-            sizeArg = len(valueArg)\n+            idOperTmp = self.idCounter\n+            typeOperTmp = data.split(' ')[0]\n+            idSourceTmp = str(self.getUsername(addr[0]))\n+            idDestinationTmp = str(self.agentIp)\n+            oidArgTmp = data.split(' ')[1]\n+            valueArgTmp = \" \"\n+            typeArgTmp = \"STRING\"\n+            sizeArgTmp = \"\"          \n+            responseTmp = self.requestToAgent(oidArg, typeOper)\n+            valueArgTmp = str(response)\n+            sizeArgTmp = len(valueArg)\n             \n+            idOper = str(idOperTmp)\n+            typeOper = str(typeOperTmp)\n+            idSource = str(idSourceTmp)\n+            idDestination = str(idDestinationTmp)\n+            oidArg = str(oidArgTmp)\n+            valueArg = str(valueArgTmp)\n+            typeArg = str(typeArgTmp)\n+            sizeArg = str(sizeArgTmp)\n+            response = str(responseTmp)\n+            valueArg = str(valueArgTmp)\n+            sizeArgTmp = str(sizeArg)\n             print(\"idOper: \" + str(idOper))\n             print(\"typeOper: \" + typeOper)\n             print(\"idSource: \" + idSource)\n             print(\"idDestination: \" + idDestination)\n"
                },
                {
                    "date": 1658662118664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n             sizeArg = str(sizeArgTmp)\n             response = str(responseTmp)\n             valueArg = str(valueArgTmp)\n             sizeArgTmp = str(sizeArg)\n+            \n             print(\"idOper: \" + str(idOper))\n             print(\"typeOper: \" + typeOper)\n             print(\"idSource: \" + idSource)\n             print(\"idDestination: \" + idDestination)\n@@ -90,10 +91,10 @@\n             self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n             #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n             response = response.decode()\n             self.responseToManager(response, addr[0])\n-        except:\n-            print(\"Invalid Synthax!\")\n+        except Exception as e:\n+            print(e)\n             response = \"Invalid Synthax!\"\n             self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n"
                },
                {
                    "date": 1658662160584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             oidArgTmp = data.split(' ')[1]\n             valueArgTmp = \" \"\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n-            responseTmp = self.requestToAgent(oidArg, typeOper)\n+            responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp)\n             valueArgTmp = str(response)\n             sizeArgTmp = len(valueArg)\n             \n             idOper = str(idOperTmp)\n"
                },
                {
                    "date": 1658662187335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n             valueArgTmp = \" \"\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n             responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp)\n-            valueArgTmp = str(response)\n+            valueArgTmp = str(responseTmp)\n             sizeArgTmp = len(valueArg)\n             \n             idOper = str(idOperTmp)\n             typeOper = str(typeOperTmp)\n"
                },
                {
                    "date": 1658662193563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n             responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp)\n             valueArgTmp = str(responseTmp)\n-            sizeArgTmp = len(valueArg)\n+            sizeArgTmp = len(valueArgTmp)\n             \n             idOper = str(idOperTmp)\n             typeOper = str(typeOperTmp)\n             idSource = str(idSourceTmp)\n"
                },
                {
                    "date": 1658662250281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n             oidArg = str(oidArgTmp)\n             valueArg = str(valueArgTmp)\n             typeArg = str(typeArgTmp)\n             sizeArg = str(sizeArgTmp)\n-            response = str(responseTmp)\n+            response = responseTmp\n             valueArg = str(valueArgTmp)\n             sizeArgTmp = str(sizeArg)\n             \n             print(\"idOper: \" + str(idOper))\n"
                },
                {
                    "date": 1658662291124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,8 @@\n         \n         \n     def processRequest(self, data, addr):\n         try:\n-            self.idCounter += 1 \n             idOperTmp = self.idCounter\n             typeOperTmp = data.split(' ')[0]\n             idSourceTmp = str(self.getUsername(addr[0]))\n             idDestinationTmp = str(self.agentIp)\n@@ -91,8 +90,9 @@\n             self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n             #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n             response = response.decode()\n             self.responseToManager(response, addr[0])\n+            self.idCounter += 1 \n         except Exception as e:\n             print(e)\n             response = \"Invalid Synthax!\"\n             self.responseToManager(response, addr[0])\n"
                },
                {
                    "date": 1658662455145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n         self.MIB = dict()\n         self.clients = dict()\n         self.clientsIP = []\n         self.clientsUsers = []\n-        self.idCounter = 0\n+        self.idCounter = 1\n         self.cstring = cstring\n         self.run()\n         \n     def populateMIBsAndCfg(self):\n@@ -53,8 +53,11 @@\n             valueArgTmp = \" \"\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n             responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp)\n+            if responseTmp == \"Invalid Request\":\n+                #Trigger the exception\n+                raise Exception\n             valueArgTmp = str(responseTmp)\n             sizeArgTmp = len(valueArgTmp)\n             \n             idOper = str(idOperTmp)\n"
                },
                {
                    "date": 1658662565192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             valueArgTmp = \" \"\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n             responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp)\n-            if responseTmp == \"Invalid Request\":\n+            if responseTmp == \"Invalid SNMP Request\":\n                 #Trigger the exception\n                 raise Exception\n             valueArgTmp = str(responseTmp)\n             sizeArgTmp = len(valueArgTmp)\n"
                },
                {
                    "date": 1658665620696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n             self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n             self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n             self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n             self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n-            #json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w+\"))\n+            json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w\"))\n             response = response.decode()\n             self.responseToManager(response, addr[0])\n             self.idCounter += 1 \n         except Exception as e:\n"
                },
                {
                    "date": 1658746681397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,15 @@\n     def processRequest(self, data, addr):\n         try:\n             idOperTmp = self.idCounter\n             typeOperTmp = data.split(' ')[0]\n+            if typeOperTmp == \"get-next\":\n+                typeOperTmp = 0\n+            elif typeOperTmp == \"get-bulk\":\n+                typeOperTmp = 1\n+            elif typeOperTmp == \"set-request\":\n+                typeOperTmp = 2\n+                \n             idSourceTmp = str(self.getUsername(addr[0]))\n             idDestinationTmp = str(self.agentIp)\n             oidArgTmp = data.split(' ')[1]\n             valueArgTmp = \" \"\n@@ -60,9 +67,9 @@\n             valueArgTmp = str(responseTmp)\n             sizeArgTmp = len(valueArgTmp)\n             \n             idOper = str(idOperTmp)\n-            typeOper = str(typeOperTmp)\n+            typeOper = (typeOperTmp)\n             idSource = str(idSourceTmp)\n             idDestination = str(idDestinationTmp)\n             oidArg = str(oidArgTmp)\n             valueArg = str(valueArgTmp)\n"
                },
                {
                    "date": 1658746945369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,17 @@\n     def processRequest(self, data, addr):\n         try:\n             idOperTmp = self.idCounter\n             typeOperTmp = data.split(' ')[0]\n+            setValueType = \"\"\n+            setValue = \"\"\n             if typeOperTmp == \"get-next\":\n                 typeOperTmp = 0\n             elif typeOperTmp == \"get-bulk\":\n                 typeOperTmp = 1\n             elif typeOperTmp == \"set-request\":\n+                setValueType = data.split(' ')[1]\n+                setValue = data.split(' ')[2]\n                 typeOperTmp = 2\n                 \n             idSourceTmp = str(self.getUsername(addr[0]))\n             idDestinationTmp = str(self.agentIp)\n"
                },
                {
                    "date": 1658747003829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,17 +46,17 @@\n     def processRequest(self, data, addr):\n         try:\n             idOperTmp = self.idCounter\n             typeOperTmp = data.split(' ')[0]\n-            setValueType = \"\"\n-            setValue = \"\"\n+            setValueTypeTmp = \"\"\n+            setValueTmp = \"\"\n             if typeOperTmp == \"get-next\":\n                 typeOperTmp = 0\n             elif typeOperTmp == \"get-bulk\":\n                 typeOperTmp = 1\n             elif typeOperTmp == \"set-request\":\n-                setValueType = data.split(' ')[1]\n-                setValue = data.split(' ')[2]\n+                setValueTypeTmp = data.split(' ')[1]\n+                setValueTmp = data.split(' ')[2]\n                 typeOperTmp = 2\n                 \n             idSourceTmp = str(self.getUsername(addr[0]))\n             idDestinationTmp = str(self.agentIp)\n@@ -81,8 +81,10 @@\n             sizeArg = str(sizeArgTmp)\n             response = responseTmp\n             valueArg = str(valueArgTmp)\n             sizeArgTmp = str(sizeArg)\n+            setValueType = str(setValueTypeTmp)\n+            setValue = str(setValueTmp)\n             \n             print(\"idOper: \" + str(idOper))\n             print(\"typeOper: \" + typeOper)\n             print(\"idSource: \" + idSource)\n"
                },
                {
                    "date": 1658747065628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,10 @@\n             self.MIB[\"Lines\"][\"5\"][self.idCounter] = oidArg\n             self.MIB[\"Lines\"][\"6\"][self.idCounter] = valueArg\n             self.MIB[\"Lines\"][\"7\"][self.idCounter] = typeArg\n             self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n+            self.MIB[\"Lines\"][\"9\"][self.idCounter] = setValueType\n+            self.MIB[\"Lines\"][\"10\"][self.idCounter] = setValue\n             json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w\"))\n             response = response.decode()\n             self.responseToManager(response, addr[0])\n             self.idCounter += 1 \n"
                },
                {
                    "date": 1658747127192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n             self.responseToManager(response, addr[0])\n             self.idCounter += 1 \n         except Exception as e:\n             print(e)\n-            response = \"Invalid Synthax!\"\n+            response = \"Invalid Syntax!\"\n             self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n         request = self.cstring + \" \" + typeOper + \" \" + oid \n"
                },
                {
                    "date": 1658747298874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,15 +85,17 @@\n             setValueType = str(setValueTypeTmp)\n             setValue = str(setValueTmp)\n             \n             print(\"idOper: \" + str(idOper))\n-            print(\"typeOper: \" + typeOper)\n-            print(\"idSource: \" + idSource)\n-            print(\"idDestination: \" + idDestination)\n-            print(\"oidArg: \" + oidArg)\n-            print(\"valueArg: \" + valueArg)\n-            print(\"typeArg: \" + typeArg)\n+            print(\"typeOper: \" + str(typeOper))\n+            print(\"idSource: \" + str(idSource))\n+            print(\"idDestination: \" + str(idDestination))\n+            print(\"oidArg: \" + str(oidArg))\n+            print(\"valueArg: \" + str(valueArg)\n+            print(\"typeArg: \" + str(typeArg))\n             print(\"sizeArg: \" + str(sizeArg))\n+            print(\"setValueType: \" + str(setValueType))\n+            print(\"setValue: \" + str(setValue))\n             print(\"----------------------------------------------------\")\n             \n             \n             self.MIB[\"Lines\"][\"1\"][self.idCounter] = idOper\n"
                },
                {
                    "date": 1658747330393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n             print(\"typeOper: \" + str(typeOper))\n             print(\"idSource: \" + str(idSource))\n             print(\"idDestination: \" + str(idDestination))\n             print(\"oidArg: \" + str(oidArg))\n-            print(\"valueArg: \" + str(valueArg)\n+            print(\"valueArg: \" + str(valueArg))\n             print(\"typeArg: \" + str(typeArg))\n             print(\"sizeArg: \" + str(sizeArg))\n             print(\"setValueType: \" + str(setValueType))\n             print(\"setValue: \" + str(setValue))\n"
                },
                {
                    "date": 1658747396446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n             response = \"Invalid Syntax!\"\n             self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n-        request = self.cstring + \" \" + typeOper + \" \" + oid \n+        request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658747468190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,10 @@\n                 typeOperTmp = 0\n             elif typeOperTmp == \"get-bulk\":\n                 typeOperTmp = 1\n             elif typeOperTmp == \"set-request\":\n-                setValueTypeTmp = data.split(' ')[1]\n-                setValueTmp = data.split(' ')[2]\n+                setValueTypeTmp = data.split(' ')[2]\n+                setValueTmp = data.split(' ')[3]\n                 typeOperTmp = 2\n                 \n             idSourceTmp = str(self.getUsername(addr[0]))\n             idDestinationTmp = str(self.agentIp)\n"
                },
                {
                    "date": 1658747587779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n             oidArgTmp = data.split(' ')[1]\n             valueArgTmp = \" \"\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n-            responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp)\n+            responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp, setValueTypeTmp, setValueTmp)\n             if responseTmp == \"Invalid SNMP Request\":\n                 #Trigger the exception\n                 raise Exception\n             valueArgTmp = str(responseTmp)\n@@ -117,9 +117,9 @@\n             response = \"Invalid Syntax!\"\n             self.responseToManager(response, addr[0])\n         \n     def requestToAgent(self, oid, typeOper):\n-        request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n+        request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658747674952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,10 +116,13 @@\n             print(e)\n             response = \"Invalid Syntax!\"\n             self.responseToManager(response, addr[0])\n         \n-    def requestToAgent(self, oid, typeOper):\n-        request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \n+    def requestToAgent(self, oid, typeOper, setValueType, setValue):\n+        if typeOper == \"set-request\":\n+            request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \" \" + str(setValueType) + \" \" + str(setValue)\n+        else:\n+            request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658747688783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n     def requestToAgent(self, oid, typeOper, setValueType, setValue):\n         if typeOper == \"set-request\":\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \" \" + str(setValueType) + \" \" + str(setValue)\n         else:\n-            request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \n+            request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658747781926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n     def processRequest(self, data, addr):\n         try:\n             idOperTmp = self.idCounter\n             typeOperTmp = data.split(' ')[0]\n+            typeOp = typeOperTmp\n             setValueTypeTmp = \"\"\n             setValueTmp = \"\"\n             if typeOperTmp == \"get-next\":\n                 typeOperTmp = 0\n"
                },
                {
                    "date": 1658747793805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n             oidArgTmp = data.split(' ')[1]\n             valueArgTmp = \" \"\n             typeArgTmp = \"STRING\"\n             sizeArgTmp = \"\"          \n-            responseTmp = self.requestToAgent(oidArgTmp, typeOperTmp, setValueTypeTmp, setValueTmp)\n+            responseTmp = self.requestToAgent(oidArgTmp, typeOp, setValueTypeTmp, setValueTmp)\n             if responseTmp == \"Invalid SNMP Request\":\n                 #Trigger the exception\n                 raise Exception\n             valueArgTmp = str(responseTmp)\n"
                },
                {
                    "date": 1658753749538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import threading, os, socket, json\n \n+import pyotp\n \n \n+\n class RequestHandler():\n     def __init__(self, cstring):\n         self.port = 161\n         self.ip = '127.0.0.3'\n@@ -157,8 +159,11 @@\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n+                    elif data.split(' ')[0] == \"2FA\":\n+                        fa = data.split(' ')[1]\n+                        totp = pyotp.TOTP(fa)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658753764514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,11 @@\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n                     elif data.split(' ')[0] == \"2FA\":\n                         fa = data.split(' ')[1]\n                         totp = pyotp.TOTP(fa)\n+                        if fa = totp.now():\n+                            self.socket.sendto(\"2FA-ack\".encode(), addr)\n+                            \n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658753771237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,11 +162,11 @@\n                             self.socket.sendto(\"login-ack\".encode(), addr)\n                     elif data.split(' ')[0] == \"2FA\":\n                         fa = data.split(' ')[1]\n                         totp = pyotp.TOTP(fa)\n-                        if fa = totp.now():\n+                        if fa == totp.now():\n                             self.socket.sendto(\"2FA-ack\".encode(), addr)\n-                            \n+                        \n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658753899382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,9 +158,9 @@\n                         password = data.split(' ')[1]\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n-                            self.socket.sendto(\"login-ack\".encode(), addr)\n+                            self.socket.sendto(\"2FA?\".encode(), addr)\n                     elif data.split(' ')[0] == \"2FA\":\n                         fa = data.split(' ')[1]\n                         totp = pyotp.TOTP(fa)\n                         if fa == totp.now():\n"
                },
                {
                    "date": 1658754308691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,14 +159,12 @@\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"2FA?\".encode(), addr)\n-                    elif data.split(' ')[0] == \"2FA\":\n-                        fa = data.split(' ')[1]\n-                        totp = pyotp.TOTP(fa)\n-                        if fa == totp.now():\n-                            self.socket.sendto(\"2FA-ack\".encode(), addr)\n-                        \n+                            data,addr = self.socket.recvfrom(4096)\n+                            totp = pyotp.TOTP(username+password)\n+                            if data.decode() == totp.now()\n+                            self.socket.sendto('login-ack'.encode(),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658754328253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"2FA?\".encode(), addr)\n                             data,addr = self.socket.recvfrom(4096)\n                             totp = pyotp.TOTP(username+password)\n-                            if data.decode() == totp.now()\n+                            if data.decode() == totp.now():\n                             self.socket.sendto('login-ack'.encode(),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n"
                },
                {
                    "date": 1658754334223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n                             self.socket.sendto(\"2FA?\".encode(), addr)\n                             data,addr = self.socket.recvfrom(4096)\n                             totp = pyotp.TOTP(username+password)\n                             if data.decode() == totp.now():\n-                            self.socket.sendto('login-ack'.encode(),addr)\n+                                self.socket.sendto('login-ack'.encode(),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658754498862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"2FA?\".encode(), addr)\n                             data,addr = self.socket.recvfrom(4096)\n-                            totp = pyotp.TOTP(username+password)\n+                            totp = pyotp.TOTP(base64.b32encode(username+password))\n                             if data.decode() == totp.now():\n                                 self.socket.sendto('login-ack'.encode(),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n"
                },
                {
                    "date": 1658754504842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, os, socket, json\n+import threading, os, socket, json, base64\n \n import pyotp\n \n \n"
                },
                {
                    "date": 1658754665770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"2FA?\".encode(), addr)\n                             data,addr = self.socket.recvfrom(4096)\n-                            totp = pyotp.TOTP(base64.b32encode(username+password))\n+                            totp = pyotp.TOTP(base64.b32encode(username+password.encode()))\n                             if data.decode() == totp.now():\n                                 self.socket.sendto('login-ack'.encode(),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n"
                },
                {
                    "date": 1658754697259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(\"2FA?\".encode(), addr)\n                             data,addr = self.socket.recvfrom(4096)\n-                            totp = pyotp.TOTP(base64.b32encode(username+password.encode()))\n+                            totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data.decode() == totp.now():\n                                 self.socket.sendto('login-ack'.encode(),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n"
                },
                {
                    "date": 1658756210145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n-import threading, os, socket, json, base64\n+import threading, os, socket, json, base64, pyotp\n+from Crypto.Cipher import AES\n \n import pyotp\n \n \n"
                },
                {
                    "date": 1658756623036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import threading, os, socket, json, base64, pyotp\n-from Crypto.Cipher import AES\n+from Crypto.Cipher import SHA256\n \n+\n import pyotp\n \n \n \n@@ -24,9 +25,13 @@\n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"authorizedUsers.json\"))\n         \n+    \n+    def encrypt(self, msg, seed):\n+        obj = AES.new()    \n         \n+    \n     def getUsername(self, addr):\n         \"\"\"\n         search the self.clients dictionary which has the following format\n         {\n"
                },
                {
                    "date": 1658756779427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import threading, os, socket, json, base64, pyotp\n-from Crypto.Cipher import SHA256\n+import rsa\n \n-\n import pyotp\n \n \n \n"
                },
                {
                    "date": 1658756999808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import threading, os, socket, json, base64, pyotp\n-import rsa\n+from cryptography.fernet import Fernet\n \n+\n import pyotp\n \n \n \n"
                },
                {
                    "date": 1658757097802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,11 +26,11 @@\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"authorizedUsers.json\"))\n         \n     \n-    def encrypt(self, msg, seed):\n-        obj = AES.new()    \n-        \n+    def generateUsersKeys(self):\n+        for key in self.clients:\n+            self.clients[key][\"key\"] = Fernet.generate_key().encode()\n     \n     def getUsername(self, addr):\n         \"\"\"\n         search the self.clients dictionary which has the following format\n"
                },
                {
                    "date": 1658767589627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,26 @@\n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"authorizedUsers.json\"))\n         \n+        \n+        \n+    def encrypt(self, message):\n+        msg = message.encode()\n+        encrypted = rsa.encrypt(msg, self.publicKey)\n+        return encrypted\n     \n+    def decrypt(self, message):\n+        decoded_msg = rsa.decrypt(message, self.privateKey)\n+        return decoded_msg.decode()\n+        \n+            \n+    def getKeys(self):\n+        with open(\"private_key.pem\", \"rb\") as f:\n+                self.privateKey = rsa.PrivateKey.load_pkcs1(f.read())\n+        with open(\"public_key.pem\", \"rb\") as f:\n+                self.publicKey = rsa.PublicKey.load_pkcs1(f.read())    \n+    \n     def generateUsersKeys(self):\n         for key in self.clients:\n             self.clients[key][\"key\"] = Fernet.generate_key().encode()\n     \n@@ -124,15 +141,17 @@\n         except Exception as e:\n             print(e)\n             response = \"Invalid Syntax!\"\n             self.responseToManager(response, addr[0])\n-        \n+    \n+    \n     def requestToAgent(self, oid, typeOper, setValueType, setValue):\n         if typeOper == \"set-request\":\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \" \" + str(setValueType) + \" \" + str(setValue)\n         else:\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n+\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n"
                },
                {
                    "date": 1658767611399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,13 @@\n         self.clientsIP = []\n         self.clientsUsers = []\n         self.idCounter = 1\n         self.cstring = cstring\n+        self.privateKey = \"\"\n+        self.publicKey = \"\"\n         self.run()\n         \n+                \n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"authorizedUsers.json\"))\n         \n"
                },
                {
                    "date": 1658767622694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-import threading, os, socket, json, base64, pyotp\n-from cryptography.fernet import Fernet\n+import threading, os, socket, json, base64, pyotp, rsa\n \n \n import pyotp\n \n@@ -28,10 +27,8 @@\n     def populateMIBsAndCfg(self):\n         self.MIB = json.load(open(\"MIBProxy.json\"))\n         self.clients = json.load(open(\"authorizedUsers.json\"))\n         \n-        \n-        \n     def encrypt(self, message):\n         msg = message.encode()\n         encrypted = rsa.encrypt(msg, self.publicKey)\n         return encrypted\n"
                },
                {
                    "date": 1658767632802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, os, socket, json, base64, pyotp, rsa\n+import socket, json, base64, pyotp, rsa\n \n \n import pyotp\n \n"
                },
                {
                    "date": 1658767646133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,9 @@\n                 self.privateKey = rsa.PrivateKey.load_pkcs1(f.read())\n         with open(\"public_key.pem\", \"rb\") as f:\n                 self.publicKey = rsa.PublicKey.load_pkcs1(f.read())    \n     \n-    def generateUsersKeys(self):\n-        for key in self.clients:\n-            self.clients[key][\"key\"] = Fernet.generate_key().encode()\n-    \n+\n     def getUsername(self, addr):\n         \"\"\"\n         search the self.clients dictionary which has the following format\n         {\n"
                },
                {
                    "date": 1658767655762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,8 +166,9 @@\n                 break\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n+        self.getKeys()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n             if addr[0] not in self.clientsIP:\n"
                },
                {
                    "date": 1658767666180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \" \" + str(setValueType) + \" \" + str(setValue)\n         else:\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n-\n+        request = self.encrypt(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n"
                },
                {
                    "date": 1658767683762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n         else:\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n         request = self.encrypt(request)\n-        self.socket.sendto(request.encode(), (self.agentIp, self.port))\n+        self.socket.sendto(request, (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data\n@@ -158,9 +158,10 @@\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n         print(\"Response to Manager: \" + response)\n-        self.socket.sendto(response.encode(), (addr, self.port))\n+        response = self.encrypt(response)\n+        self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == \"ack\":\n                 break\n"
                },
                {
                    "date": 1658767729087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n             data, addr = self.socket.recvfrom(4096)\n             data = data.decode()\n             if addr[0] not in self.clientsIP:\n                     if data.split(' ')[0] == \"login\":\n-                        self.socket.sendto(\"Username?\".encode(), addr)\n+                        self.socket.sendto(self.encrypt(\"Username?\"), addr)\n                     elif data.split(' ')[0] == \"username\":\n                         username = data.split(' ')[1]\n                         self.socket.sendto(\"Password?\".encode(), addr)\n                     elif data.split(' ')[0] == \"password\":\n"
                },
                {
                    "date": 1658767741747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n                     if data.split(' ')[0] == \"login\":\n                         self.socket.sendto(self.encrypt(\"Username?\"), addr)\n                     elif data.split(' ')[0] == \"username\":\n                         username = data.split(' ')[1]\n-                        self.socket.sendto(\"Password?\".encode(), addr)\n+                        self.socket.sendto(self.encrypt(\"Password?\").encode(), addr)\n                     elif data.split(' ')[0] == \"password\":\n                         password = data.split(' ')[1]\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n"
                },
                {
                    "date": 1658767768325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,15 +176,15 @@\n                     if data.split(' ')[0] == \"login\":\n                         self.socket.sendto(self.encrypt(\"Username?\"), addr)\n                     elif data.split(' ')[0] == \"username\":\n                         username = data.split(' ')[1]\n-                        self.socket.sendto(self.encrypt(\"Password?\").encode(), addr)\n+                        self.socket.sendto(self.encrypt(\"Password?\"), addr)\n                     elif data.split(' ')[0] == \"password\":\n                         password = data.split(' ')[1]\n                         if self.clients[username][\"password\"] == password:\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n-                            self.socket.sendto(\"2FA?\".encode(), addr)\n+                            self.socket.sendto(self.encrypt(\"2FA?\"), addr)\n                             data,addr = self.socket.recvfrom(4096)\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data.decode() == totp.now():\n                                 self.socket.sendto('login-ack'.encode(),addr)\n"
                },
                {
                    "date": 1658767783458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -186,9 +186,9 @@\n                             self.socket.sendto(self.encrypt(\"2FA?\"), addr)\n                             data,addr = self.socket.recvfrom(4096)\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data.decode() == totp.now():\n-                                self.socket.sendto('login-ack'.encode(),addr)\n+                                self.socket.sendto(self.encrypt('login-ack'),addr)\n             else:\n                 self.socket.sendto(\"ack\".encode(), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658767796171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data.decode() == totp.now():\n                                 self.socket.sendto(self.encrypt('login-ack'),addr)\n             else:\n-                self.socket.sendto(\"ack\".encode(), addr)\n+                self.socket.sendto(self.encrypt(\"ack\"), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n \n def main():\n"
                },
                {
                    "date": 1658767831498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data\n                 break\n-        print(\"Agent Response: \" + agentResponse.decode())\n+        agentResponse = self.decrypt(agentResponse)\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n         print(\"Response to Manager: \" + response)\n"
                },
                {
                    "date": 1658767841229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,8 +162,9 @@\n         response = self.encrypt(response)\n         self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n+            data = self.decrypt(data)\n             if data.decode() == \"ack\":\n                 break\n         \n     def run(self):\n"
                },
                {
                    "date": 1658767855397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,17 +163,17 @@\n         self.socket.sendto(response, (addr, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data = self.decrypt(data)\n-            if data.decode() == \"ack\":\n+            if data == \"ack\":\n                 break\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n         self.getKeys()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n-            data = data.decode()\n+            data =  self.decrypt(data)\n             if addr[0] not in self.clientsIP:\n                     if data.split(' ')[0] == \"login\":\n                         self.socket.sendto(self.encrypt(\"Username?\"), addr)\n                     elif data.split(' ')[0] == \"username\":\n"
                },
                {
                    "date": 1658767865660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,8 +185,9 @@\n                             print(\"Login Success from \" + addr[0] + \" with username \" + username)\n                             self.clientsIP.append(addr[0])\n                             self.socket.sendto(self.encrypt(\"2FA?\"), addr)\n                             data,addr = self.socket.recvfrom(4096)\n+                            data = self.decrypt(data)\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data.decode() == totp.now():\n                                 self.socket.sendto(self.encrypt('login-ack'),addr)\n             else:\n"
                },
                {
                    "date": 1658767873723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                             self.socket.sendto(self.encrypt(\"2FA?\"), addr)\n                             data,addr = self.socket.recvfrom(4096)\n                             data = self.decrypt(data)\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n-                            if data.decode() == totp.now():\n+                            if data == totp.now():\n                                 self.socket.sendto(self.encrypt('login-ack'),addr)\n             else:\n                 self.socket.sendto(self.encrypt(\"ack\"), addr)\n                 print(\"Pedido recebido: \" + data)\n"
                },
                {
                    "date": 1658768024661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,16 +146,15 @@\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \" \" + str(setValueType) + \" \" + str(setValue)\n         else:\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n-        request = self.encrypt(request)\n         self.socket.sendto(request, (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data\n                 break\n-        agentResponse = self.decrypt(agentResponse)\n+        agentResponse = agentResponse.decode()\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n         print(\"Response to Manager: \" + response)\n"
                },
                {
                    "date": 1658768101067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,13 +146,13 @@\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) + \" \" + str(setValueType) + \" \" + str(setValue)\n         else:\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n-        self.socket.sendto(request, (self.agentIp, self.port))\n+        self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n-                agentResponse = data\n+                agentResponse = data.decode()\n                 break\n         agentResponse = agentResponse.decode()\n         return agentResponse\n         \n"
                },
                {
                    "date": 1658768107594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,8 @@\n             data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data.decode()\n                 break\n-        agentResponse = agentResponse.decode()\n         return agentResponse\n         \n     def responseToManager(self, response, addr):\n         print(\"Response to Manager: \" + response)\n"
                },
                {
                    "date": 1658768282773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n             self.MIB[\"Lines\"][\"8\"][self.idCounter] = sizeArg\n             self.MIB[\"Lines\"][\"9\"][self.idCounter] = setValueType\n             self.MIB[\"Lines\"][\"10\"][self.idCounter] = setValue\n             json.dump(self.MIB, open(\"debug/MIBProxy.json\", \"w\"))\n-            response = response.decode()\n+            response = response\n             self.responseToManager(response, addr[0])\n             self.idCounter += 1 \n         except Exception as e:\n             print(e)\n"
                },
                {
                    "date": 1658768324077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n-            data,addr = self.socket.recvfrom(4096)\n+            data,addr = self.socket.recvfrom(8096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data.decode()\n                 break\n         return agentResponse\n"
                },
                {
                    "date": 1658768342733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,9 +148,9 @@\n             request = self.cstring + \" \" + str(typeOper) + \" \" + str(oid) \n         print(request)\n         self.socket.sendto(request.encode(), (self.agentIp, self.port))\n         while True:\n-            data,addr = self.socket.recvfrom(8096)\n+            data,addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 agentResponse = data.decode()\n                 break\n         return agentResponse\n"
                },
                {
                    "date": 1658778589735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import socket, json, base64, pyotp, rsa\n+import socket, json, base64, pyotp, rsa, threadin\n \n \n import pyotp\n \n@@ -192,8 +192,13 @@\n                 self.socket.sendto(self.encrypt(\"ack\"), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n \n+class Traps(threading.Thread):\n+    \n+\n+\n+\n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n     \n"
                },
                {
                    "date": 1658778608569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import socket, json, base64, pyotp, rsa, threadin\n+import socket, json, base64, pyotp, rsa, threading\n \n \n import pyotp\n \n@@ -193,8 +193,10 @@\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n \n class Traps(threading.Thread):\n+    def __init__(self):\n+        threading.Thread.__init__(self)\n     \n \n \n \n"
                },
                {
                    "date": 1658778630048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,10 @@\n \n class Traps(threading.Thread):\n     def __init__(self):\n         threading.Thread.__init__(self)\n-    \n+        self.port = 162\n+        self.ip = '127.0.0.3'\n \n \n \n def main():\n"
                },
                {
                    "date": 1658778751201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,11 +197,27 @@\n     def __init__(self):\n         threading.Thread.__init__(self)\n         self.port = 162\n         self.ip = '127.0.0.3'\n+        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n+        self.socket.bind((self.ip, self.port))\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n \n \n+    def transmitTrap(self, msg):\n+        return\n \n+    def run(self):\n+        \n+        while True:\n+            data, addr = self.socket.recvfrom(4096)\n+            if data.decode().split(' ')[0] == \"trap\":\n+                self.transmitTrap(data)\n+            elif data.decode().split(' ')[0] == \"get-request\":\n+                self.transmitTrap(data)\n+\n+\n+\n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n     \n"
                },
                {
                    "date": 1658778760177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,10 +211,10 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode().split(' ')[0] == \"trap\":\n                 self.transmitTrap(data)\n-            elif data.decode().split(' ')[0] == \"get-request\":\n-                self.transmitTrap(data)\n+            else: \n+                pass\n \n \n \n def main():\n"
                },
                {
                    "date": 1658778944705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,17 +193,17 @@\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n \n class Traps(threading.Thread):\n-    def __init__(self):\n+    def __init__(self, managerIp):\n         threading.Thread.__init__(self)\n         self.port = 162\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.managerIP = managerIp\n \n-\n     def transmitTrap(self, msg):\n         return\n \n     def run(self):\n"
                },
                {
                    "date": 1658779095899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,19 +193,26 @@\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n \n class Traps(threading.Thread):\n-    def __init__(self, managerIp):\n+    def __init__(self, managerIp, privateKey, publicKey):\n         threading.Thread.__init__(self)\n         self.port = 162\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.managerIP = managerIp\n \n+\n+\n+\n     def transmitTrap(self, msg):\n-        return\n+        self.socket.sendto(msg.encode(), (self.managerIP, self.port))\n+        while True:\n+            data, addr = self.socket.recvfrom(4096)\n+            if data\n+        \n \n     def run(self):\n         \n         while True:\n"
                },
                {
                    "date": 1658779106984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,12 +201,13 @@\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.managerIP = managerIp\n+        self.privateKey = privateKey\n+        self.publicKey = publicKey\n \n \n \n-\n     def transmitTrap(self, msg):\n         self.socket.sendto(msg.encode(), (self.managerIP, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658779170916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,14 +205,27 @@\n         self.privateKey = privateKey\n         self.publicKey = publicKey\n \n \n+         \n+    def encrypt(self, message):\n+        msg = message.encode()\n+        encrypted = rsa.encrypt(msg, self.publicKey)\n+        return encrypted\n+    \n+    def decrypt(self, message):\n+        decoded_msg = rsa.decrypt(message, self.privateKey)\n+        return decoded_msg.decode()\n \n+\n+\n     def transmitTrap(self, msg):\n-        self.socket.sendto(msg.encode(), (self.managerIP, self.port))\n+        msg = self.encrypt(msg)\n+        self.socket.sendto(msg, (self.managerIP, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n-            if data\n+            if data == \"trap-ack\":\n+                break\n         \n \n     def run(self):\n         \n"
                },
                {
                    "date": 1658779190921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,8 +222,9 @@\n         msg = self.encrypt(msg)\n         self.socket.sendto(msg, (self.managerIP, self.port))\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n+            data = self.decrypt(data)\n             if data == \"trap-ack\":\n                 break\n         \n \n"
                },
                {
                    "date": 1658830658919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,8 @@\n                 break\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n-        self.getKeys()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data =  self.decrypt(data)\n             if addr[0] not in self.clientsIP:\n@@ -241,9 +240,11 @@\n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n+    trapper = \n     \n+    \n if __name__ == \"__main__\":\n     main()\n     #requestHandler = RequestHandler(\"gsr2022\")\n     #requestHandler.run()\n"
                },
                {
                    "date": 1658830707243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n \n \n class RequestHandler():\n-    def __init__(self, cstring):\n+    def __init__(self, cstring, privateKey, publicKey):\n         self.port = 161\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n@@ -18,10 +18,10 @@\n         self.clientsIP = []\n         self.clientsUsers = []\n         self.idCounter = 1\n         self.cstring = cstring\n-        self.privateKey = \"\"\n-        self.publicKey = \"\"\n+        self.privateKey = privateKey\n+        self.publicKey = publicKey\n         self.run()\n         \n                 \n     def populateMIBsAndCfg(self):\n@@ -38,12 +38,9 @@\n         return decoded_msg.decode()\n         \n             \n     def getKeys(self):\n-        with open(\"private_key.pem\", \"rb\") as f:\n-                self.privateKey = rsa.PrivateKey.load_pkcs1(f.read())\n-        with open(\"public_key.pem\", \"rb\") as f:\n-                self.publicKey = rsa.PublicKey.load_pkcs1(f.read())    \n+\n     \n \n     def getUsername(self, addr):\n         \"\"\"\n@@ -238,10 +235,17 @@\n \n \n \n def main():\n+    with open(\"private_key.pem\", \"rb\") as f:\n+        privateKey = rsa.PrivateKey.load_pkcs1(f.read())\n+    with open(\"public_key.pem\", \"rb\") as f:\n+        publicKey = rsa.PublicKey.load_pkcs1(f.read())    \n+    \n+    \n+    \n     print(\"Bem-Vindo ao SNMP Proxy\")\n-    requestHandler = RequestHandler(\"gsr\")\n+    requestHandler = RequestHandler(\"gsr\", )\n     trapper = \n     \n     \n if __name__ == \"__main__\":\n"
                },
                {
                    "date": 1658830724371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,12 +35,8 @@\n     \n     def decrypt(self, message):\n         decoded_msg = rsa.decrypt(message, self.privateKey)\n         return decoded_msg.decode()\n-        \n-            \n-    def getKeys(self):\n-\n     \n \n     def getUsername(self, addr):\n         \"\"\"\n@@ -243,9 +239,9 @@\n     \n     \n     \n     print(\"Bem-Vindo ao SNMP Proxy\")\n-    requestHandler = RequestHandler(\"gsr\", )\n+    requestHandler = RequestHandler(\"gsr\", privateKey, publicKey)\n     trapper = \n     \n     \n if __name__ == \"__main__\":\n"
                },
                {
                    "date": 1658830794749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n \n \n class RequestHandler():\n-    def __init__(self, cstring, privateKey, publicKey):\n+    def __init__(self, cstring):\n         self.port = 161\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n@@ -18,10 +18,10 @@\n         self.clientsIP = []\n         self.clientsUsers = []\n         self.idCounter = 1\n         self.cstring = cstring\n-        self.privateKey = privateKey\n-        self.publicKey = publicKey\n+        self.privateKey = \"\"\n+        self.publicKey = \"\"\n         self.run()\n         \n                 \n     def populateMIBsAndCfg(self):\n@@ -35,8 +35,15 @@\n     \n     def decrypt(self, message):\n         decoded_msg = rsa.decrypt(message, self.privateKey)\n         return decoded_msg.decode()\n+        \n+            \n+    def getKeys(self):\n+        with open(\"private_key.pem\", \"rb\") as f:\n+                self.privateKey = rsa.PrivateKey.load_pkcs1(f.read())\n+        with open(\"public_key.pem\", \"rb\") as f:\n+                self.publicKey = rsa.PublicKey.load_pkcs1(f.read())    \n     \n \n     def getUsername(self, addr):\n         \"\"\"\n@@ -159,8 +166,9 @@\n                 break\n         \n     def run(self):\n         self.populateMIBsAndCfg()\n+        self.getKeys()\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             data =  self.decrypt(data)\n             if addr[0] not in self.clientsIP:\n@@ -231,17 +239,10 @@\n \n \n \n def main():\n-    with open(\"private_key.pem\", \"rb\") as f:\n-        privateKey = rsa.PrivateKey.load_pkcs1(f.read())\n-    with open(\"public_key.pem\", \"rb\") as f:\n-        publicKey = rsa.PublicKey.load_pkcs1(f.read())    \n-    \n-    \n-    \n     print(\"Bem-Vindo ao SNMP Proxy\")\n-    requestHandler = RequestHandler(\"gsr\", privateKey, publicKey)\n+    requestHandler = RequestHandler(\"gsr\")\n     trapper = \n     \n     \n if __name__ == \"__main__\":\n"
                },
                {
                    "date": 1658830854042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,10 @@\n                             data = self.decrypt(data)\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data == totp.now():\n                                 self.socket.sendto(self.encrypt('login-ack'),addr)\n+                            tHandler = Traps(addr[0], self.privateKey, self.publicKey)\n+                            tHandler.start()\n             else:\n                 self.socket.sendto(self.encrypt(\"ack\"), addr)\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n"
                },
                {
                    "date": 1658830872703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,8 +198,9 @@\n class Traps(threading.Thread):\n     def __init__(self, managerIp, privateKey, publicKey):\n         threading.Thread.__init__(self)\n         self.port = 162\n+        self.managerIP = managerIp\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n"
                },
                {
                    "date": 1658830894592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,12 +234,13 @@\n     def run(self):\n         \n         while True:\n             data, addr = self.socket.recvfrom(4096)\n-            if data.decode().split(' ')[0] == \"trap\":\n-                self.transmitTrap(data)\n-            else: \n-                pass\n+            if addr[0] == self.managerIP:\n+                if data.decode().split(' ')[0] == \"trap\":\n+                    self.transmitTrap(data)\n+                else: \n+                    pass\n \n \n \n def main():\n"
                },
                {
                    "date": 1658830901045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,11 @@\n             data = self.decrypt(data)\n             if data == \"trap-ack\":\n                 break\n         \n+    \n \n+\n     def run(self):\n         \n         while True:\n             data, addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658830917986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,13 +203,12 @@\n         self.ip = '127.0.0.3'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-        self.managerIP = managerIp\n         self.privateKey = privateKey\n         self.publicKey = publicKey\n+        \n \n-\n          \n     def encrypt(self, message):\n         msg = message.encode()\n         encrypted = rsa.encrypt(msg, self.publicKey)\n"
                },
                {
                    "date": 1658830943983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n                             data = self.decrypt(data)\n                             totp = pyotp.TOTP(base64.b32encode((username+password).encode()))\n                             if data == totp.now():\n                                 self.socket.sendto(self.encrypt('login-ack'),addr)\n-                            tHandler = Traps(addr[0], self.privateKey, self.publicKey)\n+                            tHandler = Traps(addr[0], self.privateKey, self.publicKey, self.agentIp)\n                             tHandler.start()\n             else:\n                 self.socket.sendto(self.encrypt(\"ack\"), addr)\n                 print(\"Pedido recebido: \" + data)\n@@ -205,10 +205,10 @@\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.privateKey = privateKey\n         self.publicKey = publicKey\n-        \n \n+\n          \n     def encrypt(self, message):\n         msg = message.encode()\n         encrypted = rsa.encrypt(msg, self.publicKey)\n"
                },
                {
                    "date": 1658830953937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n                 print(\"Pedido recebido: \" + data)\n                 self.processRequest(data, addr) \n \n class Traps(threading.Thread):\n-    def __init__(self, managerIp, privateKey, publicKey):\n+    def __init__(self, managerIp, privateKey, publicKey, agentIp):\n         threading.Thread.__init__(self)\n         self.port = 162\n         self.managerIP = managerIp\n         self.ip = '127.0.0.3'\n@@ -205,8 +205,9 @@\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.privateKey = privateKey\n         self.publicKey = publicKey\n+        self.agentIp = agentIp\n \n \n          \n     def encrypt(self, message):\n"
                },
                {
                    "date": 1658830973129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n     def run(self):\n         \n         while True:\n             data, addr = self.socket.recvfrom(4096)\n-            if addr[0] == self.managerIP:\n+            if addr[0] == self.agentIp:\n                 if data.decode().split(' ')[0] == \"trap\":\n                     self.transmitTrap(data)\n                 else: \n                     pass\n"
                },
                {
                    "date": 1658831033076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,12 +228,9 @@\n             data, addr = self.socket.recvfrom(4096)\n             data = self.decrypt(data)\n             if data == \"trap-ack\":\n                 break\n-        \n-    \n \n-\n     def run(self):\n         \n         while True:\n             data, addr = self.socket.recvfrom(4096)\n@@ -243,9 +240,8 @@\n                 else: \n                     pass\n \n \n-\n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n     trapper = \n"
                },
                {
                    "date": 1658831039291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,9 +243,8 @@\n \n def main():\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n-    trapper = \n     \n     \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1658831049303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,8 +247,4 @@\n     \n     \n if __name__ == \"__main__\":\n     main()\n-    #requestHandler = RequestHandler(\"gsr2022\")\n-    #requestHandler.run()\n-    #requestHandler.processRequest(\"get\n-    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658831624912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 if data.decode().split(' ')[0] == \"trap\":\n-                    self.transmitTrap(data)\n+                    self.transmitTrap(data.decode())\n                 else: \n                     pass\n \n \n"
                },
                {
                    "date": 1658831825172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,11 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 if data.decode().split(' ')[0] == \"trap\":\n+                    self.socket.sendto(self.encrypt(\"trap-ack\"), addr)\n                     self.transmitTrap(data.decode())\n+                    \n                 else: \n                     pass\n \n \n"
                },
                {
                    "date": 1658831841360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n         while True:\n             data, addr = self.socket.recvfrom(4096)\n             if addr[0] == self.agentIp:\n                 if data.decode().split(' ')[0] == \"trap\":\n-                    self.socket.sendto(self.encrypt(\"trap-ack\"), addr)\n+                    self.socket.sendto(\"trap-ack\".encode(), addr)\n                     self.transmitTrap(data.decode())\n                     \n                 else: \n                     pass\n"
                },
                {
                    "date": 1658833423026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,8 +243,10 @@\n                     pass\n \n \n def main():\n+    #clear terminal\n+    os.system('cls' if os.name == 'nt' else 'clear')\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n     \n     \n"
                },
                {
                    "date": 1658833430266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import socket, json, base64, pyotp, rsa, threading\n+import socket, json, base64, pyotp, rsa, threading, os\n \n \n import pyotp\n \n@@ -243,9 +243,8 @@\n                     pass\n \n \n def main():\n-    #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n     print(\"Bem-Vindo ao SNMP Proxy\")\n     requestHandler = RequestHandler(\"gsr\")\n     \n"
                }
            ],
            "date": 1658398997617,
            "name": "Commit-0",
            "content": ""
        }
    ]
}