{
    "sourceFile": "agent.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 193,
            "patches": [
                {
                    "date": 1658393959989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1658394012028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import threading, sys, time, random, os, socket\n \n \n \n-class SNMPAgent():\n+class SNMPManager():\n     def __init__(self):\n         threading.Thread.__init__(self)\n         self.requestPort = 161\n         self.trapPort = 162 \n"
                },
                {
                    "date": 1658394167929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import threading, sys, time, random, os, socket\n \n \n \n-class SNMPManager():\n+class SNMPAgent():\n     def __init__(self):\n         threading.Thread.__init__(self)\n         self.requestPort = 161\n         self.trapPort = 162 \n@@ -12,19 +12,19 @@\n         self.requestSocket.bind(('', self.requestPort))\n         self.trapSocket.bind(('', self.trapPort))\n         self.requestSocket.settimeout(1)\n         self.trapSocket.settimeout(1)\n+        self.mib = dict()\n         \n-        \n     def init(self):\n-        rH = requestHandler(self.requestPort, self.requestSocket)\n-        rH.start()        \n+        print(\"SNMP Agent Inicializado\")\n+        #print datetime.datetime.now()\n+        date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n+        print(\"A recolher MIBs...\")\n         \n-class requestHandler(threading.Thread):\n-    def __init__(self, port, socket):\n-        threading.Thread.__init__(self)\n-        self.port = port\n\\ No newline at end of file\n-        self.socket = socket\n-        self.targetProxy = \"\"\n-    def run(self):\n-        print(\"Bem Vindo ao SNMP Manager\")\n-        self.socket.sendto(\"\")\n+        \n+        \n+        \n+        \n+    def initializeMIBs(self):\n+        \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658394310238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,13 +13,17 @@\n         self.trapSocket.bind(('', self.trapPort))\n         self.requestSocket.settimeout(1)\n         self.trapSocket.settimeout(1)\n         self.mib = dict()\n+        self.communityString = \"gsr2022\"\n+        self.ip = \"192.168.1.100\"\n         \n+        \n     def init(self):\n         print(\"SNMP Agent Inicializado\")\n         #print datetime.datetime.now()\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n+        print(date)\n         print(\"A recolher MIBs...\")\n         \n         \n         \n"
                },
                {
                    "date": 1658394341934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,10 @@\n         self.trapSocket.settimeout(1)\n         self.mib = dict()\n         self.communityString = \"gsr2022\"\n         self.ip = \"192.168.1.100\"\n+        self.proxyIP = \"192.168.1.101\"\n         \n-        \n     def init(self):\n         print(\"SNMP Agent Inicializado\")\n         #print datetime.datetime.now()\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n"
                },
                {
                    "date": 1658396618221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,27 +8,24 @@\n         self.requestPort = 161\n         self.trapPort = 162 \n         self.requestSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.trapSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n-        self.requestSocket.bind(('', self.requestPort))\n-        self.trapSocket.bind(('', self.trapPort))\n+        self.requestSocket.bind((self.ip, self.requestPort))\n+        self.trapSocket.bind((self.ip, self.trapPort))\n         self.requestSocket.settimeout(1)\n         self.trapSocket.settimeout(1)\n         self.mib = dict()\n         self.communityString = \"gsr2022\"\n         self.ip = \"192.168.1.100\"\n         self.proxyIP = \"192.168.1.101\"\n         \n+    def getMIBs(self):\n+        #Ler MIB a partir do ficheiro JSON\n+        return\n+    \n+    \n     def init(self):\n         print(\"SNMP Agent Inicializado\")\n         #print datetime.datetime.now()\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n         print(date)\n-        print(\"A recolher MIBs...\")\n-        \n\\ No newline at end of file\n-        \n-        \n-        \n-        \n-    def initializeMIBs(self):\n-        \n-    \n+        print(\"A recolher MIBs...\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1658396680176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,5 +27,16 @@\n         print(\"SNMP Agent Inicializado\")\n         #print datetime.datetime.now()\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n         print(date)\n-        print(\"A recolher MIBs...\")\n\\ No newline at end of file\n+        print(\"A recolher MIBs...\")\n+        tt = trapTrigger(self.trapPort, self.trapSocket)\n+\n+class trapTrigger(threading.Thread):\n+    def __init__(self, port, socket):\n+        threading.Thread.__init__(self)\n+        self.port = port\n+        self.socket = socket\n+        self.targetProxy = \"\"\n+    def run(self):\n+        print(\"Bem Vindo ao SNMP Agent\")\n+        self.socket.sendto(\"\")\n\\ No newline at end of file\n"
                },
                {
                    "date": 1658396706973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,16 @@\n         print(date)\n         print(\"A recolher MIBs...\")\n         tt = trapTrigger(self.trapPort, self.trapSocket)\n \n+\n+\n+\n+\n class trapTrigger(threading.Thread):\n     def __init__(self, port, socket):\n         threading.Thread.__init__(self)\n         self.port = port\n         self.socket = socket\n\\ No newline at end of file\n         self.targetProxy = \"\"\n     def run(self):\n-        print(\"Bem Vindo ao SNMP Agent\")\n-        self.socket.sendto(\"\")\n+        return\n\\ No newline at end of file\n"
                },
                {
                    "date": 1658396990437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n         self.mib = dict()\n         self.communityString = \"gsr2022\"\n         self.ip = \"192.168.1.100\"\n         self.proxyIP = \"192.168.1.101\"\n+        self.lock = threading.Lock()\n         \n     def getMIBs(self):\n         #Ler MIB a partir do ficheiro JSON\n         return\n@@ -28,14 +29,19 @@\n         #print datetime.datetime.now()\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n         print(date)\n         print(\"A recolher MIBs...\")\n-        tt = trapTrigger(self.trapPort, self.trapSocket)\n+        \n \n \n+class Listener():\n+    def __init__(self, socket, mib):\n+        self.socket = socket\n+        self.mib = mib\n+        \n+    def \n \n \n-\n class trapTrigger(threading.Thread):\n     def __init__(self, port, socket):\n         threading.Thread.__init__(self)\n         self.port = port\n"
                },
                {
                    "date": 1658397139220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import threading, sys, time, random, os, socket\n \n \n+MIB = dict()\n \n+\n class SNMPAgent():\n     def __init__(self):\n         threading.Thread.__init__(self)\n         self.requestPort = 161\n@@ -30,20 +32,19 @@\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n         print(date)\n         print(\"A recolher MIBs...\")\n         \n+        \n \n-\n class Listener():\n-    def __init__(self, socket, mib):\n-        self.socket = socket\n-        self.mib = mib\n+    def __init__(self, s):\n         \n+        \n     def \n \n \n class trapTrigger(threading.Thread):\n-    def __init__(self, port, socket):\n+    def __init__(self, parent):\n         threading.Thread.__init__(self)\n         self.port = port\n         self.socket = socket\n         self.targetProxy = \"\"\n"
                },
                {
                    "date": 1658397150892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n         self.requestSocket.bind((self.ip, self.requestPort))\n         self.trapSocket.bind((self.ip, self.trapPort))\n         self.requestSocket.settimeout(1)\n         self.trapSocket.settimeout(1)\n-        self.mib = dict()\n         self.communityString = \"gsr2022\"\n         self.ip = \"192.168.1.100\"\n         self.proxyIP = \"192.168.1.101\"\n         self.lock = threading.Lock()\n@@ -26,8 +25,9 @@\n         return\n     \n     \n     def init(self):\n+        global MIB\n         print(\"SNMP Agent Inicializado\")\n         #print datetime.datetime.now()\n         date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n         print(date)\n"
                },
                {
                    "date": 1658397208293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,12 +35,19 @@\n         \n         \n \n class Listener():\n-    def __init__(self, s):\n+    def __init__(self, socket):\n+        self.socket = socket\n         \n-        \n-    def \n+    def requestHandler(self):\n+        try:\n+            while True:\n+                data, addr = self.socket.recvfrom(4096)\n+                print(\"Recebido pedido de \" + addr[0])\n+        except Exception as e:\n+            print(e)\n+            return\n \n \n class trapTrigger(threading.Thread):\n     def __init__(self, parent):\n"
                },
                {
                    "date": 1658397240584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,13 @@\n         try:\n             while True:\n                 data, addr = self.socket.recvfrom(4096)\n                 print(\"Recebido pedido de \" + addr[0])\n+                processRequest(data)\n         except Exception as e:\n             print(e)\n             return\n \n-\n class trapTrigger(threading.Thread):\n     def __init__(self, parent):\n         threading.Thread.__init__(self)\n         self.port = port\n"
                },
                {
                    "date": 1658397283504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,15 +37,20 @@\n \n class Listener():\n     def __init__(self, socket):\n         self.socket = socket\n+        self.ips = []\n         \n+        \n+    def processRequest(self, data, ip):\n+        \n+        \n     def requestHandler(self):\n         try:\n             while True:\n                 data, addr = self.socket.recvfrom(4096)\n                 print(\"Recebido pedido de \" + addr[0])\n-                processRequest(data)\n+                processRequest(data, addr[0])\n         except Exception as e:\n             print(e)\n             return\n \n"
                },
                {
                    "date": 1658397318443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n class Listener():\n     def __init__(self, socket):\n         self.socket = socket\n         self.ips = []\n+        self.communityString = \"\"\n         \n         \n     def processRequest(self, data, ip):\n         \n"
                },
                {
                    "date": 1658397507798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,63 +3,15 @@\n \n MIB = dict()\n \n \n-class SNMPAgent():\n-    def __init__(self):\n-        threading.Thread.__init__(self)\n-        self.requestPort = 161\n-        self.trapPort = 162 \n-        self.requestSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n-        self.trapSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n-        self.requestSocket.bind((self.ip, self.requestPort))\n-        self.trapSocket.bind((self.ip, self.trapPort))\n-        self.requestSocket.settimeout(1)\n-        self.trapSocket.settimeout(1)\n-        self.communityString = \"gsr2022\"\n-        self.ip = \"192.168.1.100\"\n-        self.proxyIP = \"192.168.1.101\"\n-        self.lock = threading.Lock()\n-        \n-    def getMIBs(self):\n-        #Ler MIB a partir do ficheiro JSON\n-        return\n-    \n-    \n-    def init(self):\n-        global MIB\n-        print(\"SNMP Agent Inicializado\")\n-        #print datetime.datetime.now()\n-        date = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime())\n-        print(date)\n-        print(\"A recolher MIBs...\")\n-        \n-        \n \n-class Listener():\n-    def __init__(self, socket):\n-        self.socket = socket\n-        self.ips = []\n-        self.communityString = \"\"\n-        \n-        \n-    def processRequest(self, data, ip):\n-        \n-        \n-    def requestHandler(self):\n-        try:\n-            while True:\n-                data, addr = self.socket.recvfrom(4096)\n-                print(\"Recebido pedido de \" + addr[0])\n-                processRequest(data, addr[0])\n-        except Exception as e:\n-            print(e)\n-            return\n \n-class trapTrigger(threading.Thread):\n-    def __init__(self, parent):\n-        threading.Thread.__init__(self)\n-        self.port = port\n-        self.socket = socket\n-        self.targetProxy = \"\"\n-    def run(self):\n-        return\n\\ No newline at end of file\n+\n+def main():\n+    print(\"A Inicializar agente SNMP...\")\n+    #clear terminal\n+    os.system('cls' if os.name == 'nt' else 'clear')\n+    cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n+    print(\"Community String Escolhida: \"+cstring)\n+    \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658397681388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,29 @@\n MIB = dict()\n \n \n \n+class RequestHandler():\n+    def __init__(self):\n+        threading.Thread\n+        self.port = 161\n+        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n+        self.targetProxy = \"\"\n+    def run(self):\n+        print(\"Bem Vindo ao SNMP Manager\")\n+        self.socket.sendto(\"\")\n \n \n+\n+\n+\n def main():\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n     cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n     print(\"Community String Escolhida: \"+cstring)\n+    print(\"A inicializar processos, endpoints, MIBs...\")\n     \n+    \n+    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658397708287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,11 @@\n class RequestHandler():\n     def __init__(self):\n         threading.Thread\n         self.port = 161\n+        self.ip = '192.168.100.1'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n+        self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n     def run(self):\n         print(\"Bem Vindo ao SNMP Manager\")\n         self.socket.sendto(\"\")\n"
                },
                {
                    "date": 1658397786425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,23 +5,20 @@\n \n \n \n class RequestHandler():\n-    def __init__(self):\n+    def __init__(self, cstring):\n         threading.Thread\n         self.port = 161\n         self.ip = '192.168.100.1'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n-    def run(self):\n-        print(\"Bem Vindo ao SNMP Manager\")\n-        self.socket.sendto(\"\")\n+        self.cstring = cstring\n \n \n \n \n-\n def main():\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n@@ -30,5 +27,6 @@\n     print(\"A inicializar processos, endpoints, MIBs...\")\n     \n     \n     \n+    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658397867647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,13 @@\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n         self.cstring = cstring\n+        self.clients = []\n+    \n+    def run(self):\n+        \n+        while True:        \n \n \n \n \n"
                },
                {
                    "date": 1658397879873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,18 @@\n         self.cstring = cstring\n         self.clients = []\n     \n     def run(self):\n+        try:\n+            while True:        \n         \n-        while True:        \n+        except Exception as e:\n+            print(e)\n+            self.socket.close()\n+            sys.exit(1)\n \n \n \n-\n def main():\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n"
                },
                {
                    "date": 1658398133656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from base64 import decode\n import threading, sys, time, random, os, socket\n \n \n MIB = dict()\n@@ -15,15 +16,28 @@\n         self.targetProxy = \"\"\n         self.cstring = cstring\n         self.clients = []\n     \n+    \n+    def processRequest(self,data, addr):\n+        if data == \"login\":\n+            if addr not in self.clients:\n+                self.clients.append(addr)\n+                print(\"Cliente \" + addr + \" conectado\")\n+                return \"login-ack\"\n+    \n+    \n+    \n+    \n     def run(self):\n         try:\n             while True:        \n-        \n+                data, addr = self.socket.recvfrom(4096)\n+                data = decode(data)\n+                if data.decode().split('-')[0] == cstring:\n+                    processRequest(data)\n         except Exception as e:\n             print(e)\n-            self.socket.close()\n             sys.exit(1)\n \n \n \n"
                },
                {
                    "date": 1658398994979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,18 +17,19 @@\n         self.cstring = cstring\n         self.clients = []\n     \n     \n+    \"Sintaxe de \"\n+    \n     def processRequest(self,data, addr):\n-        if data == \"login\":\n+        if data.split[1]('%') == \"login\":\n             if addr not in self.clients:\n                 self.clients.append(addr)\n                 print(\"Cliente \" + addr + \" conectado\")\n                 return \"login-ack\"\n+        elif data.split('')\n+\n     \n-    \n-    \n-    \n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n"
                },
                {
                    "date": 1658405526807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,23 +20,32 @@\n     \n     \"Sintaxe de \"\n     \n     def processRequest(self,data, addr):\n-        if data.split[1]('%') == \"login\":\n+        if data.split('%')[1] == \"login\":\n             if addr not in self.clients:\n                 self.clients.append(addr)\n                 print(\"Cliente \" + addr + \" conectado\")\n                 return \"login-ack\"\n-        elif data.split('')\n+        elif data.split('%')[1] == \"get-request\":\n+            if addr in self.clients:\n+                code = data.split('%')[2]\n+                ret = self.getRequest(code)\n \n     \n+    \n+    \n+    \n+    def getRequest(self, code):\n+        return\n+    \n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = decode(data)\n                 if data.decode().split('-')[0] == cstring:\n-                    processRequest(data)\n+                    self.processRequest(data)\n         except Exception as e:\n             print(e)\n             sys.exit(1)\n \n"
                },
                {
                    "date": 1658405564425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,12 @@\n         elif data.split('%')[1] == \"get-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 ret = self.getRequest(code)\n-\n+        elif data.split('%')[1] == \"get-next-request\":\n+            if addr in self.clients:\n+                code = data.split('%')[2]\n+                ret = self.getNextRequest(code)\n     \n     \n     \n     \n"
                },
                {
                    "date": 1658406522282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,19 @@\n         elif data.split('%')[1] == \"get-next-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 ret = self.getNextRequest(code)\n+        elif data.split('%')[1] == \"get-bulk-request\":\n+            if addr in self.clients:\n+                code = data.split('%')[2]\n+                ret = self.getBulkRequest(code)\n+        elif data.split('%')[1] == \"set-request\":\n+            if addr in self.clients:\n+                code = data.split('%')[2]\n+                type = data.split('%')[3]\n+                value = data.split('%')[4]\n+                ret = self.setRequest(code)\n+            \n     \n     \n     \n     \n"
                },
                {
                    "date": 1658406527370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 type = data.split('%')[3]\n                 value = data.split('%')[4]\n-                ret = self.setRequest(code)\n+                ret = self.setRequest(code, type, value)\n             \n     \n     \n     \n"
                },
                {
                    "date": 1658406573010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,15 +42,20 @@\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 type = data.split('%')[3]\n                 value = data.split('%')[4]\n-                ret = self.setRequest(code, type, value)\n-            \n+                ret = self.setRequest(code, type, value)    \n+\n+    def getRequest(self, code):\n+        return\n     \n+    def getNextRequest(self, code):\n+        return\n     \n+    def getBulkRequest(self, code):\n+        return\n     \n-    \n-    def getRequest(self, code):\n+    def setRequest(self, code, type, value):\n         return\n     \n     def run(self):\n         try:\n"
                },
                {
                    "date": 1658479052686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,10 @@\n                 print(\"Cliente \" + addr + \" conectado\")\n                 return \"login-ack\"\n         elif data.split('%')[1] == \"get-request\":\n             if addr in self.clients:\n-                code = data.split('%')[2]\n-                ret = self.getRequest(code)\n+                oid = data.split('%')[2]\n+                ret = self.getRequest(oid)\n         elif data.split('%')[1] == \"get-next-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 ret = self.getNextRequest(code)\n"
                },
                {
                    "date": 1658479067702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = decode(data)\n-                if data.decode().split('-')[0] == cstring:\n+                if data.decode().split('-')[0] == self.cstring:\n                     self.processRequest(data)\n         except Exception as e:\n             print(e)\n             sys.exit(1)\n"
                },
                {
                    "date": 1658480012474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,11 @@\n import threading, sys, time, random, os, socket\n \n \n MIB = dict()\n+mibVals = []\n \n \n-\n class RequestHandler():\n     def __init__(self, cstring):\n         threading.Thread\n         self.port = 161\n"
                },
                {
                    "date": 1658480063720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,17 @@\n     os.system('cls' if os.name == 'nt' else 'clear')\n     cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n     print(\"Community String Escolhida: \"+cstring)\n     print(\"A inicializar processos, endpoints, MIBs...\")\n+    #load mibs from MIBAgent.json into MIB dictionary\n+    with open('MIBAgent.json') as f:\n+        data = f.read()\n+        data = data.split('\\n')\n+        for line in data:\n+            if line != \"\":\n+                line = line.split(':')\n+                MIB[line[0]] = line[1]\n+                mibVals.append(line[1])\n     \n     \n     \n-    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658480112880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,23 +70,17 @@\n \n \n \n def main():\n+    global MIB\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n     cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n     print(\"Community String Escolhida: \"+cstring)\n     print(\"A inicializar processos, endpoints, MIBs...\")\n-    #load mibs from MIBAgent.json into MIB dictionary\n-    with open('MIBAgent.json') as f:\n-        data = f.read()\n-        data = data.split('\\n')\n-        for line in data:\n-            if line != \"\":\n-                line = line.split(':')\n-                MIB[line[0]] = line[1]\n-                mibVals.append(line[1])\n+\n+    MIB = json.load(MIBAgent.json)\n     \n     \n     \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658480138048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from base64 import decode\n-import threading, sys, time, random, os, socket\n+import threading, sys, time, random, os, socket, json\n \n \n MIB = dict()\n mibVals = []\n@@ -78,9 +78,9 @@\n     cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n     print(\"Community String Escolhida: \"+cstring)\n     print(\"A inicializar processos, endpoints, MIBs...\")\n \n-    MIB = json.load(MIBAgent.json)\n+    MIB = son.load(open('MIBAgent.json') \n     \n     \n     \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658480207218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,14 @@\n             sys.exit(1)\n \n \n \n+class hwFetch(threading.Thread):\n+    def __init__(self):\n+        threading.Thread.__init__(self)\n+\n+\n+\n def main():\n     global MIB\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n@@ -78,9 +84,12 @@\n     cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n     print(\"Community String Escolhida: \"+cstring)\n     print(\"A inicializar processos, endpoints, MIBs...\")\n \n-    MIB = son.load(open('MIBAgent.json') \n+    MIB = json.load(open('MIBAgent.json'))\n     \n+    #inicializar para set de valores das MIBs.\n     \n     \n+    \n+    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658480615999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n \n class hwFetch(threading.Thread):\n     def __init__(self):\n         threading.Thread.__init__(self)\n+        self.values = []\n \n \n \n def main():\n"
                },
                {
                    "date": 1658481305496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,17 @@\n                 type = data.split('%')[3]\n                 value = data.split('%')[4]\n                 ret = self.setRequest(code, type, value)    \n \n-    def getRequest(self, code):\n-        return\n+    def getRequest(self, oid):\n+        if oid.split('.')[1] == \"HWINFO\" and oid.split('.')[2] == \"1\":\n+            cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n+            cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n+            response = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+        return response\n     \n+    def sendResponse(self, response, )\n+    \n     def getNextRequest(self, code):\n         return\n     \n     def getBulkRequest(self, code):\n@@ -69,15 +75,12 @@\n             sys.exit(1)\n \n \n \n-class hwFetch(threading.Thread):\n-    def __init__(self):\n-        threading.Thread.__init__(self)\n-        self.values = []\n \n \n \n+\n def main():\n     global MIB\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n@@ -87,9 +90,8 @@\n     print(\"A inicializar processos, endpoints, MIBs...\")\n \n     MIB = json.load(open('MIBAgent.json'))\n     \n-    #inicializar para set de valores das MIBs.\n     \n     \n     \n     \n"
                },
                {
                    "date": 1658481315413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 code = data.split('%')[2]\n                 type = data.split('%')[3]\n                 value = data.split('%')[4]\n                 ret = self.setRequest(code, type, value)    \n-\n+        return ret\n     def getRequest(self, oid):\n         if oid.split('.')[1] == \"HWINFO\" and oid.split('.')[2] == \"1\":\n             cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n             cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n"
                },
                {
                    "date": 1658481327286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n                 type = data.split('%')[3]\n                 value = data.split('%')[4]\n                 ret = self.setRequest(code, type, value)    \n         return ret\n+    \n     def getRequest(self, oid):\n         if oid.split('.')[1] == \"HWINFO\" and oid.split('.')[2] == \"1\":\n             cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n             cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n@@ -68,9 +69,9 @@\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = decode(data)\n                 if data.decode().split('-')[0] == self.cstring:\n-                    self.processRequest(data)\n+                    response = self.processRequest(data)\n         except Exception as e:\n             print(e)\n             sys.exit(1)\n \n"
                },
                {
                    "date": 1658481499879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,16 @@\n         if oid.split('.')[1] == \"HWINFO\" and oid.split('.')[2] == \"1\":\n             cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n             cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n             response = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+        elif oid.split('.')[2] == \"HWINFO\" and oid.split('.')[2] == \"2\":\n+            memInfo = os.system('lsb_release -a | grep \"Description:\" -m1')\n+)\n+            response = memInfo\n         return response\n-    \n-    def sendResponse(self, response, )\n-    \n+\n+\n+\n     def getNextRequest(self, code):\n         return\n     \n     def getBulkRequest(self, code):\n"
                },
                {
                    "date": 1658481514098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,9 @@\n             cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n             cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n             response = cpuInfo + \"-\" + cpuCores + \"Threads\"\n         elif oid.split('.')[2] == \"HWINFO\" and oid.split('.')[2] == \"2\":\n-            memInfo = os.system('lsb_release -a | grep \"Description:\" -m1')\n-)\n-            response = memInfo\n+            response = os.system('lsb_release -a | grep \"Description:\" -m1')\n         return response\n \n \n \n"
                },
                {
                    "date": 1658481631744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,14 +46,23 @@\n                 ret = self.setRequest(code, type, value)    \n         return ret\n     \n     def getRequest(self, oid):\n-        if oid.split('.')[1] == \"HWINFO\" and oid.split('.')[2] == \"1\":\n-            cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n-            cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n-            response = cpuInfo + \"-\" + cpuCores + \"Threads\"\n-        elif oid.split('.')[2] == \"HWINFO\" and oid.split('.')[2] == \"2\":\n-            response = os.system('lsb_release -a | grep \"Description:\" -m1')\n+        if oid.split('.')[1] == \"HWINFO\":\n+            if oid.split('.')[2] == \"1\":\n+                cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n+                cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n+                response = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+                \n+            elif oid.split('.')[2] == \"2\":\n+                response = os.system('lsb_release -a | grep \"Description:\" -m1')\n+                \n+            elif oid.split('.')[2] == \"3\":\n+                #get CPU Utilization\n+                cpuUtil = os.system('top -b -n1 | grep \"Cpu(s)\" | awk \\'{print $2 + $4}\\'')\n+        \n+        \n+        \n         return response\n \n \n \n"
                },
                {
                    "date": 1658481791234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,11 @@\n                 response = os.system('lsb_release -a | grep \"Description:\" -m1')\n                 \n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n-                cpuUtil = os.system('top -b -n1 | grep \"Cpu(s)\" | awk \\'{print $2 + $4}\\'')\n+                reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n         \n+            elif oid.split('.')[2] == \"4\":\n         \n         \n         return response\n \n"
                },
                {
                    "date": 1658481897305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n                 #get CPU Utilization\n                 reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n         \n             elif oid.split('.')[2] == \"4\":\n+                avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n         \n-        \n         return response\n \n \n \n"
                },
                {
                    "date": 1658481903119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n                 #get CPU Utilization\n                 reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n         \n             elif oid.split('.')[2] == \"4\":\n+                totalRam = os.system('free -m | grep \"Mem\" -m1')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n         \n         return response\n \n"
                },
                {
                    "date": 1658481928443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n                 #get CPU Utilization\n                 reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n         \n             elif oid.split('.')[2] == \"4\":\n-                totalRam = os.system('free -m | grep \"Mem\" -m1')\n+                totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n         \n         return response\n \n"
                },
                {
                    "date": 1658481942175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n         \n             elif oid.split('.')[2] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n-        \n+                reponse = totalRam + \"-\" + avaiableMem\n         return response\n \n \n \n"
                },
                {
                    "date": 1658482151920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,14 @@\n             elif oid.split('.')[2] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 reponse = totalRam + \"-\" + avaiableMem\n+        \n+            elif oid.split('.')[2] == \"5\":\n+                space = os.system('df -h | grep \"/\" -m1')\n+        \n+            elif oid.split('.')[2] == \"6\":\n+                response = os.system('uptime -p')\n         return response\n \n \n \n"
                },
                {
                    "date": 1658482190938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 reponse = totalRam + \"-\" + avaiableMem\n         \n             elif oid.split('.')[2] == \"5\":\n-                space = os.system('df -h | grep \"/\" -m1')\n+                space = os.system('df | grep \"/dev/sdb2')\n         \n             elif oid.split('.')[2] == \"6\":\n                 response = os.system('uptime -p')\n         return response\n"
                },
                {
                    "date": 1658482199765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n                 reponse = totalRam + \"-\" + avaiableMem\n         \n             elif oid.split('.')[2] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n-        \n+                response = space\n             elif oid.split('.')[2] == \"6\":\n                 response = os.system('uptime -p')\n         return response\n \n"
                },
                {
                    "date": 1658482279111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,15 @@\n         self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n         self.cstring = cstring\n         self.clients = []\n+        self.cpuInfo = \"\"\n+        self.os = \"\"\n+        self.cpuUsage = \"\"\n+        self.aviableRam = \"\"\n+        self.availableStorage = \"\"\n+        self.uptime = \"\"\n     \n-    \n     \"Sintaxe de \"\n     \n     def processRequest(self,data, addr):\n         if data.split('%')[1] == \"login\":\n@@ -62,9 +67,9 @@\n         \n             elif oid.split('.')[2] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n-                reponse = totalRam + \"-\" + avaiableMem\n+                response = totalRam + \"-\" + avaiableMem\n         \n             elif oid.split('.')[2] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n                 response = space\n"
                },
                {
                    "date": 1658482314817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n         self.clients = []\n         self.cpuInfo = \"\"\n         self.os = \"\"\n         self.cpuUsage = \"\"\n-        self.aviableRam = \"\"\n+        self.availableRam = \"\"\n         self.availableStorage = \"\"\n-        self.uptime = \"\"\n+        self.upTime = \"\"\n     \n     \"Sintaxe de \"\n     \n     def processRequest(self,data, addr):\n@@ -55,12 +55,12 @@\n         if oid.split('.')[1] == \"HWINFO\":\n             if oid.split('.')[2] == \"1\":\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n-                response = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+                self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n                 \n             elif oid.split('.')[2] == \"2\":\n-                response = os.system('lsb_release -a | grep \"Description:\" -m1')\n+                self.available = os.system('lsb_release -a | grep \"Description:\" -m1')\n                 \n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n                 reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n"
                },
                {
                    "date": 1658482334238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n                 self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n                 \n             elif oid.split('.')[2] == \"2\":\n-                self.available = os.system('lsb_release -a | grep \"Description:\" -m1')\n+                self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 \n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n                 reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n"
                },
                {
                    "date": 1658482678147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,20 +62,24 @@\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 \n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n-                reponse = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n-        \n+                cpuUtilization = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n+                self.cpuUsage = cpuUtilization\n+                \n             elif oid.split('.')[2] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 response = totalRam + \"-\" + avaiableMem\n-        \n+                self.availableRam = response\n+                \n             elif oid.split('.')[2] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n-                response = space\n+                self.availableStorage = space\n+                \n             elif oid.split('.')[2] == \"6\":\n                 response = os.system('uptime -p')\n+                self.upTime = response\n         return response\n \n \n \n"
                },
                {
                    "date": 1658482977645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n         self.cpuUsage = \"\"\n         self.availableRam = \"\"\n         self.availableStorage = \"\"\n         self.upTime = \"\"\n+        self.hostname = \"snmpAgent\"\n     \n     \"Sintaxe de \"\n     \n     def processRequest(self,data, addr):\n"
                },
                {
                    "date": 1658483001434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,12 @@\n                 \n             elif oid.split('.')[2] == \"6\":\n                 response = os.system('uptime -p')\n                 self.upTime = response\n+                \n+            elif oid.split('.')[2] == \"7\":\n+                response = os.system('hostname')\n+                self.hostname = response\n         return response\n \n \n \n"
                },
                {
                    "date": 1658483025050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,10 +81,9 @@\n                 response = os.system('uptime -p')\n                 self.upTime = response\n                 \n             elif oid.split('.')[2] == \"7\":\n-                response = os.system('hostname')\n-                self.hostname = response\n+                return self.hostname\n         return response\n \n \n \n"
                },
                {
                    "date": 1658483040136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n                 \n             elif oid.split('.')[2] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n                 self.availableStorage = space\n-                \n+                response = self.availableStorage\n             elif oid.split('.')[2] == \"6\":\n                 response = os.system('uptime -p')\n                 self.upTime = response\n                 \n"
                },
                {
                    "date": 1658483049266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n                 cpuUtilization = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n                 self.cpuUsage = cpuUtilization\n-                \n+                reponse = self.cpuUsage\n             elif oid.split('.')[2] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 response = totalRam + \"-\" + avaiableMem\n"
                },
                {
                    "date": 1658483058008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n                 self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n                 \n             elif oid.split('.')[2] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n-                \n+                response = self.os\n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n                 cpuUtilization = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n                 self.cpuUsage = cpuUtilization\n"
                },
                {
                    "date": 1658483086021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,17 +57,20 @@\n             if oid.split('.')[2] == \"1\":\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n                 self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+                response = self.cpuInfo\n                 \n             elif oid.split('.')[2] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n+                \n             elif oid.split('.')[2] == \"3\":\n                 #get CPU Utilization\n                 cpuUtilization = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n                 self.cpuUsage = cpuUtilization\n-                reponse = self.cpuUsage\n+                response = self.cpuUsage\n+                \n             elif oid.split('.')[2] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 response = totalRam + \"-\" + avaiableMem\n@@ -76,8 +79,9 @@\n             elif oid.split('.')[2] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n                 self.availableStorage = space\n                 response = self.availableStorage\n+                \n             elif oid.split('.')[2] == \"6\":\n                 response = os.system('uptime -p')\n                 self.upTime = response\n                 \n"
                },
                {
                    "date": 1658483231910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,9 @@\n                 ret = self.getRequest(oid)\n         elif data.split('%')[1] == \"get-next-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n-                ret = self.getNextRequest(code)\n-        elif data.split('%')[1] == \"get-bulk-request\":\n-            if addr in self.clients:\n-                code = data.split('%')[2]\n-                ret = self.getBulkRequest(code)\n+                ret = self.getRequest(code)\n         elif data.split('%')[1] == \"set-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 type = data.split('%')[3]\n"
                },
                {
                    "date": 1658483338171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,19 +83,17 @@\n                 \n             elif oid.split('.')[2] == \"7\":\n                 return self.hostname\n         return response\n-\n-\n-\n-    def getNextRequest(self, code):\n-        return\n     \n-    def getBulkRequest(self, code):\n-        return\n-    \n     def setRequest(self, code, type, value):\n-        return\n+        if code.split('.')[1] == \"HWINFO\":\n+            if code.split('.')[2] == \"7\":\n+                self.hostname = value\n+                response = self.hostname\n+            else:\n+                response = \"access denied!\"\n+        return respnose\n     \n     def run(self):\n         try:\n             while True:        \n"
                },
                {
                    "date": 1658483352148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,14 +86,14 @@\n         return response\n     \n     def setRequest(self, code, type, value):\n         if code.split('.')[1] == \"HWINFO\":\n-            if code.split('.')[2] == \"7\":\n+            if code.split('.')[2] == \"7\" and type = \"s\":\n                 self.hostname = value\n                 response = self.hostname\n             else:\n                 response = \"access denied!\"\n-        return respnose\n+        return responde\n     \n     def run(self):\n         try:\n             while True:        \n"
                },
                {
                    "date": 1658483391619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n         self.availableStorage = \"\"\n         self.upTime = \"\"\n         self.hostname = \"snmpAgent\"\n     \n-    \"Sintaxe de \"\n     \n     def processRequest(self,data, addr):\n         if data.split('%')[1] == \"login\":\n             if addr not in self.clients:\n@@ -86,22 +85,24 @@\n         return response\n     \n     def setRequest(self, code, type, value):\n         if code.split('.')[1] == \"HWINFO\":\n-            if code.split('.')[2] == \"7\" and type = \"s\":\n+            if code.split('.')[2] == \"7\" and type == \"s\":\n                 self.hostname = value\n                 response = self.hostname\n             else:\n                 response = \"access denied!\"\n-        return responde\n-    \n+        return response\n+\n+\n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = decode(data)\n                 if data.decode().split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n+                self.socket.sendto(\"%s-%s\" % (self.cstring, response), addr)\n         except Exception as e:\n             print(e)\n             sys.exit(1)\n \n"
                },
                {
                    "date": 1658483422088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,10 @@\n                 data, addr = self.socket.recvfrom(4096)\n                 data = decode(data)\n                 if data.decode().split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n-                self.socket.sendto(\"%s-%s\" % (self.cstring, response), addr)\n+                self.socket.sendto(\"%s\" %  (response), addr)\n+                \n         except Exception as e:\n             print(e)\n             sys.exit(1)\n \n"
                },
                {
                    "date": 1658483445855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,15 @@\n     print(\"A inicializar processos, endpoints, MIBs...\")\n \n     MIB = json.load(open('MIBAgent.json'))\n     \n+    rH = RequestHandler(cstring)\n+    rH.start()\n     \n+if __name__ == \"__main__\":\n+    main()\n+    sys.exit(0)\n     \n     \n     \n+    \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658483453616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     rH.start()\n     \n if __name__ == \"__main__\":\n     main()\n-    sys.exit(0)\n+\n     \n     \n     \n     \n"
                },
                {
                    "date": 1658483524283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class RequestHandler():\n     def __init__(self, cstring):\n         threading.Thread\n         self.port = 161\n-        self.ip = '192.168.100.1'\n+        self.ip = '10.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n         self.cstring = cstring\n"
                },
                {
                    "date": 1658483530362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n class RequestHandler():\n     def __init__(self, cstring):\n         threading.Thread\n-        self.port = 161\n+        self.port = 1610\n         self.ip = '10.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n"
                },
                {
                    "date": 1658483538599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \n class RequestHandler():\n     def __init__(self, cstring):\n         threading.Thread\n-        self.port = 1610\n+        self.port = 161\n         self.ip = '10.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.targetProxy = \"\"\n"
                },
                {
                    "date": 1658483579316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         self.port = 161\n         self.ip = '10.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.targetProxy = \"\"\n         self.cstring = cstring\n         self.clients = []\n         self.cpuInfo = \"\"\n"
                },
                {
                    "date": 1658483639344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class RequestHandler():\n     def __init__(self, cstring):\n         threading.Thread\n         self.port = 161\n-        self.ip = '10.0.0.2'\n+        self.ip = '127.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.targetProxy = \"\"\n"
                },
                {
                    "date": 1658483732304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n \n class RequestHandler():\n     def __init__(self, cstring):\n-        threading.Thread\n+        threading.Thread.__init__(self)\n         self.port = 161\n         self.ip = '127.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n"
                },
                {
                    "date": 1658483864452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n MIB = dict()\n mibVals = []\n \n \n-class RequestHandler():\n+class RequestHandler(threading.Thread):\n     def __init__(self, cstring):\n         threading.Thread.__init__(self)\n         self.port = 161\n         self.ip = '127.0.0.2'\n"
                },
                {
                    "date": 1658500216586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-from base64 import decode\n import threading, sys, time, random, os, socket, json\n \n \n MIB = dict()\n"
                },
                {
                    "date": 1658500556789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n-                data = decode(data)\n+                data = data.decode(data)\n                 if data.decode().split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n                 self.socket.sendto(\"%s\" %  (response), addr)\n                 \n"
                },
                {
                    "date": 1658562895557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,9 @@\n         self.hostname = \"snmpAgent\"\n     \n     \n     def processRequest(self,data, addr):\n-        if data.split('%')[1] == \"login\":\n-            if addr not in self.clients:\n-                self.clients.append(addr)\n-                print(\"Cliente \" + addr + \" conectado\")\n-                return \"login-ack\"\n-        elif data.split('%')[1] == \"get-request\":\n+        if data.split('%')[1] == \"get-request\":\n             if addr in self.clients:\n                 oid = data.split('%')[2]\n                 ret = self.getRequest(oid)\n         elif data.split('%')[1] == \"get-next-request\":\n"
                },
                {
                    "date": 1658562941547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n         self.targetProxy = \"\"\n         self.cstring = cstring\n-        self.clients = []\n         self.cpuInfo = \"\"\n         self.os = \"\"\n         self.cpuUsage = \"\"\n         self.availableRam = \"\"\n@@ -25,16 +24,19 @@\n         self.hostname = \"snmpAgent\"\n     \n     \n     def processRequest(self,data, addr):\n+        \n         if data.split('%')[1] == \"get-request\":\n             if addr in self.clients:\n                 oid = data.split('%')[2]\n                 ret = self.getRequest(oid)\n+                \n         elif data.split('%')[1] == \"get-next-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 ret = self.getRequest(code)\n+                \n         elif data.split('%')[1] == \"set-request\":\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 type = data.split('%')[3]\n"
                },
                {
                    "date": 1658566263599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n-                data = data.decode(data)\n+                data = data.decode()\n                 if data.decode().split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n                 self.socket.sendto(\"%s\" %  (response), addr)\n                 \n"
                },
                {
                    "date": 1658566313742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = data.decode()\n-                if data.decode().split('-')[0] == self.cstring:\n+                if data.split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n                 self.socket.sendto(\"%s\" %  (response), addr)\n                 \n         except Exception as e:\n"
                },
                {
                    "date": 1658566323515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = data.decode()\n+                print(data)\n                 if data.split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n                 self.socket.sendto(\"%s\" %  (response), addr)\n                 \n"
                },
                {
                    "date": 1658566397819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,11 @@\n                 data = data.decode()\n                 print(data)\n                 if data.split('-')[0] == self.cstring:\n                     response = self.processRequest(data)\n-                self.socket.sendto(\"%s\" %  (response), addr)\n                 \n+                #self.socket.sendto(\"%s\" %  (response), addr)\n+                \n         except Exception as e:\n             print(e)\n             sys.exit(1)\n \n"
                },
                {
                    "date": 1658568031490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     \n     \n     def processRequest(self,data, addr):\n         \n-        if data.split('%')[1] == \"get-request\":\n+        if data.split('0')[1] == \"get-request\":\n             if addr in self.clients:\n                 oid = data.split('%')[2]\n                 ret = self.getRequest(oid)\n                 \n@@ -35,13 +35,13 @@\n             if addr in self.clients:\n                 code = data.split('%')[2]\n                 ret = self.getRequest(code)\n                 \n-        elif data.split('%')[1] == \"set-request\":\n+        elif data.split('0')[1] == \"set-request\":\n             if addr in self.clients:\n-                code = data.split('%')[2]\n-                type = data.split('%')[3]\n-                value = data.split('%')[4]\n+                code = data.split(' ')[2]\n+                type = data.split(' ')[3]\n+                value = data.split(' ')[4]\n                 ret = self.setRequest(code, type, value)    \n         return ret\n     \n     def getRequest(self, oid):\n"
                },
                {
                    "date": 1658568074550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,14 @@\n     def processRequest(self,data, addr):\n         \n         if data.split('0')[1] == \"get-request\":\n             if addr in self.clients:\n-                oid = data.split('%')[2]\n+                oid = data.split(' ')[2]\n                 ret = self.getRequest(oid)\n                 \n         elif data.split('%')[1] == \"get-next-request\":\n             if addr in self.clients:\n-                code = data.split('%')[2]\n+                code = data.split(' ')[2]\n                 ret = self.getRequest(code)\n                 \n         elif data.split('0')[1] == \"set-request\":\n             if addr in self.clients:\n"
                },
                {
                    "date": 1658568104362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,19 +25,19 @@\n     \n     \n     def processRequest(self,data, addr):\n         \n-        if data.split('0')[1] == \"get-request\":\n+        if data.split(' ')[1] == \"get-request\":\n             if addr in self.clients:\n                 oid = data.split(' ')[2]\n                 ret = self.getRequest(oid)\n                 \n-        elif data.split('%')[1] == \"get-next-request\":\n+        elif data.split(' ')[1] == \"get-next-request\":\n             if addr in self.clients:\n                 code = data.split(' ')[2]\n                 ret = self.getRequest(code)\n                 \n-        elif data.split('0')[1] == \"set-request\":\n+        elif data.split(' ')[1] == \"set-request\":\n             if addr in self.clients:\n                 code = data.split(' ')[2]\n                 type = data.split(' ')[3]\n                 value = data.split(' ')[4]\n"
                },
                {
                    "date": 1658568139008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n     \n     def processRequest(self,data, addr):\n         \n         if data.split(' ')[1] == \"get-request\":\n+            print(\"get-request....\")\n             if addr in self.clients:\n                 oid = data.split(' ')[2]\n                 ret = self.getRequest(oid)\n                 \n"
                },
                {
                    "date": 1658568170081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n                 data = data.decode()\n                 print(data)\n-                if data.split('-')[0] == self.cstring:\n+                if data.split(' ')[0] == self.cstring:\n                     response = self.processRequest(data)\n                 \n                 #self.socket.sendto(\"%s\" %  (response), addr)\n                 \n"
                },
                {
                    "date": 1658568198575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n                 data, addr = self.socket.recvfrom(4096)\n                 data = data.decode()\n                 print(data)\n                 if data.split(' ')[0] == self.cstring:\n-                    response = self.processRequest(data)\n+                    response = self.processRequest(data, addr)\n                 \n                 #self.socket.sendto(\"%s\" %  (response), addr)\n                 \n         except Exception as e:\n"
                },
                {
                    "date": 1658568211391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n                 data, addr = self.socket.recvfrom(4096)\n                 data = data.decode()\n                 print(data)\n                 if data.split(' ')[0] == self.cstring:\n-                    response = self.processRequest(data, addr)\n+                    response = self.processRequest(data, addr[0])\n                 \n                 #self.socket.sendto(\"%s\" %  (response), addr)\n                 \n         except Exception as e:\n"
                },
                {
                    "date": 1658568263802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,23 +27,20 @@\n     def processRequest(self,data, addr):\n         \n         if data.split(' ')[1] == \"get-request\":\n             print(\"get-request....\")\n-            if addr in self.clients:\n-                oid = data.split(' ')[2]\n-                ret = self.getRequest(oid)\n+            oid = data.split(' ')[2]\n+            ret = self.getRequest(oid)\n                 \n         elif data.split(' ')[1] == \"get-next-request\":\n-            if addr in self.clients:\n-                code = data.split(' ')[2]\n-                ret = self.getRequest(code)\n+            code = data.split(' ')[2]\n+            ret = self.getRequest(code)\n                 \n         elif data.split(' ')[1] == \"set-request\":\n-            if addr in self.clients:\n-                code = data.split(' ')[2]\n-                type = data.split(' ')[3]\n-                value = data.split(' ')[4]\n-                ret = self.setRequest(code, type, value)    \n+            code = data.split(' ')[2]\n+            type = data.split(' ')[3]\n+            value = data.split(' ')[4]\n+            ret = self.setRequest(code, type, value)    \n         return ret\n     \n     def getRequest(self, oid):\n         if oid.split('.')[1] == \"HWINFO\":\n"
                },
                {
                    "date": 1658568297835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n         \n         if data.split(' ')[1] == \"get-request\":\n             print(\"get-request....\")\n             oid = data.split(' ')[2]\n+            print(\"OID: \" + oid)\n             ret = self.getRequest(oid)\n                 \n         elif data.split(' ')[1] == \"get-next-request\":\n             code = data.split(' ')[2]\n"
                },
                {
                    "date": 1658568310318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n             ret = self.setRequest(code, type, value)    \n         return ret\n     \n     def getRequest(self, oid):\n+        print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[1] == \"HWINFO\":\n             if oid.split('.')[2] == \"1\":\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n"
                },
                {
                    "date": 1658568361361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n             ret = self.setRequest(code, type, value)    \n         return ret\n     \n     def getRequest(self, oid):\n+        response = \"\"\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[1] == \"HWINFO\":\n             if oid.split('.')[2] == \"1\":\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n"
                },
                {
                    "date": 1658568390911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n                 self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n                 response = self.cpuInfo\n+                print(response)\n                 \n             elif oid.split('.')[2] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658568492349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,42 +45,42 @@\n     \n     def getRequest(self, oid):\n         response = \"\"\n         print(\"A processar get request com o OID: \" + oid)\n-        if oid.split('.')[1] == \"HWINFO\":\n-            if oid.split('.')[2] == \"1\":\n+        if oid.split('.')[0] == \"HWINFO\":\n+            if oid.split('.')[1] == \"1\":\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n                 self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n                 response = self.cpuInfo\n                 print(response)\n                 \n-            elif oid.split('.')[2] == \"2\":\n+            elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n                 \n-            elif oid.split('.')[2] == \"3\":\n+            elif oid.split('.')[1] == \"3\":\n                 #get CPU Utilization\n                 cpuUtilization = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n                 self.cpuUsage = cpuUtilization\n                 response = self.cpuUsage\n                 \n-            elif oid.split('.')[2] == \"4\":\n+            elif oid.split('.')[1] == \"4\":\n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 response = totalRam + \"-\" + avaiableMem\n                 self.availableRam = response\n                 \n-            elif oid.split('.')[2] == \"5\":\n+            elif oid.split('.')[1] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n                 self.availableStorage = space\n                 response = self.availableStorage\n                 \n-            elif oid.split('.')[2] == \"6\":\n+            elif oid.split('.')[1] == \"6\":\n                 response = os.system('uptime -p')\n                 self.upTime = response\n                 \n-            elif oid.split('.')[2] == \"7\":\n+            elif oid.split('.')[1] == \"7\":\n                 return self.hostname\n         return response\n     \n     def setRequest(self, code, type, value):\n"
                },
                {
                    "date": 1658568565018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,11 @@\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                 cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n                 cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n-                self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+                #self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n+                print(cpuInfo)\n+                print(cpuCores)\n                 response = self.cpuInfo\n                 print(response)\n                 \n             elif oid.split('.')[1] == \"2\":\n"
                },
                {
                    "date": 1658568637815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, sys, time, random, os, socket, json\n+import threading, sys, time, random, os, socket, json, platform\n \n \n MIB = dict()\n mibVals = []\n"
                },
                {
                    "date": 1658568655623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,15 +47,9 @@\n         response = \"\"\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n-                cpuInfo = os.system('cat /proc/cpuinfo | grep \"model name\" -m1')\n-                cpuCores = os.system('cat /proc/cpuinfo | grep \"siblings\" -m1')\n-                #self.cpuInfo = cpuInfo + \"-\" + cpuCores + \"Threads\"\n-                print(cpuInfo)\n-                print(cpuCores)\n-                response = self.cpuInfo\n-                print(response)\n+                cpuInfo = platform.processor()\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658568665616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                 cpuInfo = platform.processor()\n+                print(cpuInfo)\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658568766447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, sys, time, random, os, socket, json, platform\n+import threading, sys, time, random, os, socket, json\n \n \n MIB = dict()\n mibVals = []\n@@ -47,10 +47,10 @@\n         response = \"\"\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n-                cpuInfo = platform.processor()\n-                print(cpuInfo)\n+               #get CPU model name + number of cores\n+                cpuInfo = \n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658568979097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                #get CPU model name + number of cores\n-                cpuInfo = \n+                cpu = os.system('grep -m 1 'model name' /proc/cpuinfo')\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658568999635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,10 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                #get CPU model name + number of cores\n-                cpu = os.system('grep -m 1 'model name' /proc/cpuinfo')\n+                cpu = os.system(\"grep -m 1 'model name' /proc/cpuinfo'\")\n+                print(cpu)\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658569057728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                #get CPU model name + number of cores\n-                cpu = os.system(\"grep -m 1 'model name' /proc/cpuinfo'\")\n+                cpu = os.system('grep -m 1 \"model name\" /proc/cpuinfo')\n                 print(cpu)\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n"
                },
                {
                    "date": 1658569118199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                #get CPU model name + number of cores\n-                cpu = os.system('grep -m 1 \"model name\" /proc/cpuinfo')\n+                cpu = os.system('grep -m 1 \"model name\" /proc/cpuinfo').split(': ')[1]\n                 print(cpu)\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n"
                },
                {
                    "date": 1658569169836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                #get CPU model name + number of cores\n-                cpu = os.system('grep -m 1 \"model name\" /proc/cpuinfo').split(': ')[1]\n+                cpu = str(os.system('grep -m 1 \"model name\" /proc/cpuinfo')).split(': ')[1]\n                 print(cpu)\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n"
                },
                {
                    "date": 1658569209954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n                #get CPU model name + number of cores\n-                cpu = str(os.system('grep -m 1 \"model name\" /proc/cpuinfo')).split(': ')[1]\n+                cpu = str(os.system('grep -m 1 \"model name\" /proc/cpuinfo'))\n                 print(cpu)\n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n"
                },
                {
                    "date": 1658569928569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, sys, time, random, os, socket, json\n+, subprocess\n \n \n MIB = dict()\n mibVals = []\n"
                },
                {
                    "date": 1658569973743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-, subprocess\n+import threading, sys, time, random, os, socket, json, subprocess\n \n \n MIB = dict()\n mibVals = []\n@@ -47,11 +47,13 @@\n         response = \"\"\n         print(\"A processar get request com o OID: \" + oid)\n         if oid.split('.')[0] == \"HWINFO\":\n             if oid.split('.')[1] == \"1\":\n-               #get CPU model name + number of cores\n-                cpu = str(os.system('grep -m 1 \"model name\" /proc/cpuinfo'))\n-                print(cpu)\n+               #make a subprocess call to execute the following command grep -m 1 \"model name\" /proc/cpuinfo' and get its output to a variable\n+                self.cpuInfo = subprocess.check_output(['grep', '-m', '1', 'model name', '/proc/cpuinfo']).decode().split(':')[1].strip()\n+                response = self.cpuInfo\n+                print(response)\n+               \n                 \n             elif oid.split('.')[1] == \"2\":\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n"
                },
                {
                    "date": 1658571329749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,11 +100,11 @@\n                 data = data.decode()\n                 print(data)\n                 if data.split(' ')[0] == self.cstring:\n                     response = self.processRequest(data, addr[0])\n+                    self.socket.sendto(\"%s\" %  (response), addr)\n+                    \n                 \n-                #self.socket.sendto(\"%s\" %  (response), addr)\n-                \n         except Exception as e:\n             print(e)\n             sys.exit(1)\n \n"
                },
                {
                    "date": 1658571370283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n                 data = data.decode()\n                 print(data)\n                 if data.split(' ')[0] == self.cstring:\n                     response = self.processRequest(data, addr[0])\n-                    self.socket.sendto(\"%s\" %  (response), addr)\n+                    self.socket.sendto(response.encode(), addr)\n                     \n                 \n         except Exception as e:\n             print(e)\n"
                },
                {
                    "date": 1658581193786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n                 print(response)\n                \n                 \n             elif oid.split('.')[1] == \"2\":\n+                #make a subprocess call to execute the following command grep -m 1 \"mlsb_release -a | grep \"Description:\" -m1' and get its output to a variable\n                 self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n"
                },
                {
                    "date": 1658581221524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,14 +55,14 @@\n                \n                 \n             elif oid.split('.')[1] == \"2\":\n                 #make a subprocess call to execute the following command grep -m 1 \"mlsb_release -a | grep \"Description:\" -m1' and get its output to a variable\n-                self.os= os.system('lsb_release -a | grep \"Description:\" -m1')\n+                self.os = subprocess.check_output(['grep', '-m', '1', 'Description:', '/etc/os-release']).decode().split(':')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #get CPU Utilization\n-                cpuUtilization = os.system('top -b -n1 | grep \"Cpu(s)\" -m1')    \n+                #make a subprocess call to execute the following command top -b -n1 | grep \"Cpu(s)\" -m1' and get its output to a variable\n+                cpuUtilization = os.system('')    \n                 self.cpuUsage = cpuUtilization\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n"
                },
                {
                    "date": 1658581230839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subprocess call to execute the following command top -b -n1 | grep \"Cpu(s)\" -m1' and get its output to a variable\n-                cpuUtilization = os.system('')    \n+                self.cpuUsage = subprocess.check_output(['top', '-b', '-n1']).decode().split('\\n')[1].split(',')[2].split('%')[0].strip()  \n                 self.cpuUsage = cpuUtilization\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n"
                },
                {
                    "date": 1658581264385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,12 +61,15 @@\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subprocess call to execute the following command top -b -n1 | grep \"Cpu(s)\" -m1' and get its output to a variable\n                 self.cpuUsage = subprocess.check_output(['top', '-b', '-n1']).decode().split('\\n')[1].split(',')[2].split('%')[0].strip()  \n-                self.cpuUsage = cpuUtilization\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n+                #make a subprocess call to execute the following command free -m | grep \"Mem\" -m1' and get its output to a variable\n+                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[3].strip()\n+                #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n+                \n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 response = totalRam + \"-\" + avaiableMem\n                 self.availableRam = response\n"
                },
                {
                    "date": 1658581292234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,9 @@\n             elif oid.split('.')[1] == \"4\":\n                 #make a subprocess call to execute the following command free -m | grep \"Mem\" -m1' and get its output to a variable\n                 self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[3].strip()\n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n+                totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n                 \n                 totalRam = os.system('grep MemTotal /proc/meminfo')\n                 avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n                 response = totalRam + \"-\" + avaiableMem\n"
                },
                {
                    "date": 1658581313033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,9 @@\n                 #make a subprocess call to execute the following command free -m | grep \"Mem\" -m1' and get its output to a variable\n                 self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[3].strip()\n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n-                \n-                totalRam = os.system('grep MemTotal /proc/meminfo')\n-                avaiableMem = os.system('free -m | grep \"Mem\" -m1')\n-                response = totalRam + \"-\" + avaiableMem\n+                response = self.availableRam + \"-\" + totalRam\n                 self.availableRam = response\n                 \n             elif oid.split('.')[1] == \"5\":\n                 space = os.system('df | grep \"/dev/sdb2')\n"
                },
                {
                    "date": 1658581325861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,10 @@\n                 response = self.availableRam + \"-\" + totalRam\n                 self.availableRam = response\n                 \n             elif oid.split('.')[1] == \"5\":\n-                space = os.system('df | grep \"/dev/sdb2')\n+                #make a subprocess call to execute the following command df -h | grep \"sda1\" -m1' and get its output to a variable\n+                space = os.system(')\n                 self.availableStorage = space\n                 response = self.availableStorage\n                 \n             elif oid.split('.')[1] == \"6\":\n"
                },
                {
                    "date": 1658581347894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,15 +72,15 @@\n                 response = self.availableRam + \"-\" + totalRam\n                 self.availableRam = response\n                 \n             elif oid.split('.')[1] == \"5\":\n-                #make a subprocess call to execute the following command df -h | grep \"sda1\" -m1' and get its output to a variable\n-                space = os.system(')\n-                self.availableStorage = space\n+                #make a subprocess call to execute the following command df | grep \"/dev/sdb2' and get its output to a variable\n+                self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[-1].strip()\n                 response = self.availableStorage\n                 \n             elif oid.split('.')[1] == \"6\":\n-                response = os.system('uptime -p')\n+                #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n+                response = subprocess.check_output(['uptime', '-p']).decode().strip()\n                 self.upTime = response\n                 \n             elif oid.split('.')[1] == \"7\":\n                 return self.hostname\n"
                },
                {
                    "date": 1658581473940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n                 print(response)\n                \n                 \n             elif oid.split('.')[1] == \"2\":\n-                #make a subprocess call to execute the following command grep -m 1 \"mlsb_release -a | grep \"Description:\" -m1' and get its output to a variable\n-                self.os = subprocess.check_output(['grep', '-m', '1', 'Description:', '/etc/os-release']).decode().split(':')[1].strip()\n+                #make a subprocess call to find the OS name and get its output to a variable\n+                self.os =   subprocess.check_output(['uname', '-s']).decode().strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subprocess call to execute the following command top -b -n1 | grep \"Cpu(s)\" -m1' and get its output to a variable\n"
                },
                {
                    "date": 1658581494046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n                 print(response)\n                \n                 \n             elif oid.split('.')[1] == \"2\":\n-                #make a subprocess call to find the OS name and get its output to a variable\n-                self.os =   subprocess.check_output(['uname', '-s']).decode().strip()\n+                #make a subprocess call to find the OS and Distribution name and get its output to a variable\n+                self.os = subprocess.check_output(['lsb_release', '-a']).decode().split(':')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subprocess call to execute the following command top -b -n1 | grep \"Cpu(s)\" -m1' and get its output to a variable\n"
                },
                {
                    "date": 1658581614999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n                 self.os = subprocess.check_output(['lsb_release', '-a']).decode().split(':')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subprocess call to execute the following command top -b -n1 | grep \"Cpu(s)\" -m1' and get its output to a variable\n-                self.cpuUsage = subprocess.check_output(['top', '-b', '-n1']).decode().split('\\n')[1].split(',')[2].split('%')[0].strip()  \n+                #make a subprocess call to find cpu usage in percentage\n+                self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 #make a subprocess call to execute the following command free -m | grep \"Mem\" -m1' and get its output to a variable\n"
                },
                {
                    "date": 1658581627595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n                \n                 \n             elif oid.split('.')[1] == \"2\":\n                 #make a subprocess call to find the OS and Distribution name and get its output to a variable\n-                self.os = subprocess.check_output(['lsb_release', '-a']).decode().split(':')[1].strip()\n+                self.os = subprocess.check_output(['lsb_release', '-a']).decode().split(':')[1].strip()[:-1]\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subprocess call to find cpu usage in percentage\n"
                },
                {
                    "date": 1658581674583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                 #make a subprocess call to execute the following command free -m | grep \"Mem\" -m1' and get its output to a variable\n                 self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[3].strip()\n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n-                response = self.availableRam + \"-\" + totalRam\n+                response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n                 self.availableRam = response\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to execute the following command df | grep \"/dev/sdb2' and get its output to a variable\n"
                },
                {
                    "date": 1658581702229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,10 +64,11 @@\n                 self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n-                #make a subprocess call to execute the following command free -m | grep \"Mem\" -m1' and get its output to a variable\n-                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[3].strip()\n+                \n+                #make a subprocess call to find the used RAM in total size and get its output to a variable\n+                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[1]\n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n                 response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n                 self.availableRam = response\n"
                },
                {
                    "date": 1658581727325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,10 @@\n                 response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n                 self.availableRam = response\n                 \n             elif oid.split('.')[1] == \"5\":\n-                #make a subprocess call to execute the following command df | grep \"/dev/sdb2' and get its output to a variable\n-                self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[-1].strip()\n+                #make a subprocess call to find the used storage in percentage and get its output to a variable\n+                self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[-2]\n                 response = self.availableStorage\n                 \n             elif oid.split('.')[1] == \"6\":\n                 #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n"
                },
                {
                    "date": 1658582312708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n                 self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[1]\n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n                 response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n-                self.availableRam = response\n+                self.availableRam = response       \n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the used storage in percentage and get its output to a variable\n                 self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[-2]\n"
                },
                {
                    "date": 1658651817518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,10 +54,10 @@\n                 print(response)\n                \n                 \n             elif oid.split('.')[1] == \"2\":\n-                #make a subprocess call to find the OS and Distribution name and get its output to a variable\n-                self.os = subprocess.check_output(['lsb_release', '-a']).decode().split(':')[1].strip()[:-1]\n+                #make a subprocess call to find the OS name and get its output to a variable\n+                self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subprocess call to find cpu usage in percentage\n"
                },
                {
                    "date": 1658653169527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n                 self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subprocess call to find cpu usage in percentage\n+                #make a subprocess call to find cpu usage in % and get its output to a variable\n                 self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n"
                },
                {
                    "date": 1658653283201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n                 self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subprocess call to find cpu usage in % and get its output to a variable\n-                self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n+                #make a subprocess call to find total cpu usage and get its output to a variable\n+                self.cpuUsage = subprocess.check_output(['grep', '-m', '1', 'cpu', '/proc/stat']).decode().split(' ')[2].strip()\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n"
                },
                {
                    "date": 1658653311058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,11 @@\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n-                #make a subprocess call to find the used RAM in total size and get its output to a variable\n-                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[1]\n+                #make a subprocess call to find the used ram and get its output to a variable\n+                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[2].strip()\n+                \n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n                 response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n                 self.availableRam = response       \n"
                },
                {
                    "date": 1658653338205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,17 +67,16 @@\n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to find the used ram and get its output to a variable\n                 self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[2].strip()\n-                \n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n                 response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n                 self.availableRam = response       \n                 \n             elif oid.split('.')[1] == \"5\":\n-                #make a subprocess call to find the used storage in percentage and get its output to a variable\n-                self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[-2]\n+                #make a subprocess call to find the percentage of storage used and get its output to a variable\n+                self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[4].strip()\n                 response = self.availableStorage\n                 \n             elif oid.split('.')[1] == \"6\":\n                 #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n"
                },
                {
                    "date": 1658653565842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n                 self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subprocess call to find total cpu usage and get its output to a variable\n-                self.cpuUsage = subprocess.check_output(['grep', '-m', '1', 'cpu', '/proc/stat']).decode().split(' ')[2].strip()\n+                #make a subprocess call to find total cpu usage in percentage and get its output to a variable\n+                self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n"
                },
                {
                    "date": 1658653580070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to find the used ram and get its output to a variable\n-                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[1].split(' ')[2].strip()\n+                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[1]\n                 #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n                 totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n                 response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n                 self.availableRam = response       \n"
                },
                {
                    "date": 1658653633673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,11 @@\n                 self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subprocess call to find total cpu usage in percentage and get its output to a variable\n-                self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n+                #make a subprocess call to find total all core cpu usage and get its output to a variable\n+                self.cpuUsage = subprocess.check_output(['grep', '-m', '1', 'cpu cores', '/proc/cpuinfo']).decode().split(':')[1].strip()\n+               \n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n"
                },
                {
                    "date": 1658653730094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,14 +66,15 @@\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n-                #make a subprocess call to find the used ram and get its output to a variable\n-                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[1]\n-                #make a subprocess call to execute the following command grep MemTotal /proc/meminfo' and get its output to a variable\n-                totalRam = subprocess.check_output(['grep', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n-                response = \"Used RAM: \"+ self.availableRam + \"| Total RAM: \" + totalRam\n-                self.availableRam = response       \n+                #make 3 subprocess calls to find total ram, used ram and available ram and get their output to a variable\n+                self.availableRam = subprocess.check_output(['grep', '-m', '1', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n+                self.availableRam = int(self.availableRam) / 1024\n+                self.availableRam = round(self.availableRam, 2)\n+                self.availableRam = str(self.availableRam)\n+                self.availableRam = self.availableRam + \" GB\"\n+                response = self.availableRam   \n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n                 self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[4].strip()\n"
                },
                {
                    "date": 1658653777051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,10 @@\n                 self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subprocess call to find total all core cpu usage and get its output to a variable\n-                self.cpuUsage = subprocess.check_output(['grep', '-m', '1', 'cpu cores', '/proc/cpuinfo']).decode().split(':')[1].strip()\n-               \n+                #make a subproces call to find the CPU usage and get its output to a variable\n+                self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n"
                },
                {
                    "date": 1658653875395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,15 +65,11 @@\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n-                #make 3 subprocess calls to find total ram, used ram and available ram and get their output to a variable\n-                self.availableRam = subprocess.check_output(['grep', '-m', '1', 'MemTotal', '/proc/meminfo']).decode().split(':')[1].strip()\n-                self.availableRam = int(self.availableRam) / 1024\n-                self.availableRam = round(self.availableRam, 2)\n-                self.availableRam = str(self.availableRam)\n-                self.availableRam = self.availableRam + \" GB\"\n-                response = self.availableRam   \n+                #make a subprocess call to get the output of free -m and get its output to a variable\n+                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[3]\n+                response = self.availableRam\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n                 self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[4].strip()\n"
                },
                {
                    "date": 1658654042735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,11 @@\n                 self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n-                #make a subproces call to find the CPU usage and get its output to a variable\n+                #make a subproces call to find the total CPU usage and get its output to a variable\n                 self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n+                \n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n"
                },
                {
                    "date": 1658654180478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import threading, sys, time, random, os, socket, json, subprocess\n+import threading, sys, time, random, os, socket, json, subprocess, psutil\n \n \n MIB = dict()\n mibVals = []\n@@ -60,10 +60,9 @@\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subproces call to find the total CPU usage and get its output to a variable\n-                self.cpuUsage = subprocess.check_output(['top', '-b', '-n', '1']).decode().split('\\n')[7].split(' ')[2]\n-                \n+                self.cpuUsage = psutil.cpu_percent()\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n"
                },
                {
                    "date": 1658654219744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to get the output of free -m and get its output to a variable\n-                self.availableRam = subprocess.check_output(['free', '-m']).decode().split('\\n')[2].split(' ')[3]\n+                self.availableRam = psutil.virtual_memory().percent\n                 response = self.availableRam\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n"
                },
                {
                    "date": 1658654263566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,15 +60,15 @@\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subproces call to find the total CPU usage and get its output to a variable\n-                self.cpuUsage = psutil.cpu_percent()\n+                self.cpuUsage = str(psutil.cpu_percent())\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to get the output of free -m and get its output to a variable\n-                self.availableRam = psutil.virtual_memory().percent\n+                self.availableRam = str(psutil.virtual_memory().percent)\n                 response = self.availableRam\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n"
                },
                {
                    "date": 1658654332918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,15 +60,15 @@\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subproces call to find the total CPU usage and get its output to a variable\n-                self.cpuUsage = str(psutil.cpu_percent())\n+                self.cpuUsage = str(psutil.cpu_percent()) + \"%\"\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to get the output of free -m and get its output to a variable\n-                self.availableRam = str(psutil.virtual_memory().percent)\n+                self.availableRam = str(psutil.virtual_memory().percent) + \"%\"\n                 response = self.availableRam\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n"
                },
                {
                    "date": 1658654351395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,15 +60,15 @@\n                 response = self.os\n                 \n             elif oid.split('.')[1] == \"3\":\n                 #make a subproces call to find the total CPU usage and get its output to a variable\n-                self.cpuUsage = str(psutil.cpu_percent()) + \"%\"\n+                self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n                 response = self.cpuUsage\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to get the output of free -m and get its output to a variable\n-                self.availableRam = str(psutil.virtual_memory().percent) + \"%\"\n+                self.availableRam = \"RAM USAGE: \" + str(psutil.virtual_memory().percent) + \"%\"\n                 response = self.availableRam\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n"
                },
                {
                    "date": 1658654416186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,14 +66,14 @@\n                 \n             elif oid.split('.')[1] == \"4\":\n                 \n                 #make a subprocess call to get the output of free -m and get its output to a variable\n-                self.availableRam = \"RAM USAGE: \" + str(psutil.virtual_memory().percent) + \"%\"\n+                self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n                 response = self.availableRam\n                 \n             elif oid.split('.')[1] == \"5\":\n                 #make a subprocess call to find the percentage of storage used and get its output to a variable\n-                self.availableStorage = subprocess.check_output(['df', '-h']).decode().split('\\n')[1].split(' ')[4].strip()\n+                self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n                 response = self.availableStorage\n                 \n             elif oid.split('.')[1] == \"6\":\n                 #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n"
                },
                {
                    "date": 1658654554492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,12 @@\n         elif data.split(' ')[1] == \"set-request\":\n             code = data.split(' ')[2]\n             type = data.split(' ')[3]\n             value = data.split(' ')[4]\n-            ret = self.setRequest(code, type, value)    \n+            ret = self.setRequest(code, type, value)\n+            \n+        else :\n+            ret = \"Invalid SNMP request\"    \n         return ret\n     \n     def getRequest(self, oid):\n         response = \"\"\n"
                },
                {
                    "date": 1658654593506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,15 +122,11 @@\n     global MIB\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n-    cstring = input(\"Introduza a cstring para configuração, seguido de enter:\")\n-    print(\"Community String Escolhida: \"+cstring)\n-    print(\"A inicializar processos, endpoints, MIBs...\")\n-\n     MIB = json.load(open('MIBAgent.json'))\n     \n-    rH = RequestHandler(cstring)\n+    rH = RequestHandler(\"gsr\")\n     rH.start()\n     \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1658654626790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,10 @@\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n     MIB = json.load(open('MIBAgent.json'))\n-    \n+    cstring = gsr\n+    print(\"Community String: \" + cstring)\n     rH = RequestHandler(\"gsr\")\n     rH.start()\n     \n if __name__ == \"__main__\":\n"
                },
                {
                    "date": 1658654633883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,11 +123,11 @@\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n     os.system('cls' if os.name == 'nt' else 'clear')\n     MIB = json.load(open('MIBAgent.json'))\n-    cstring = gsr\n+    cstring = \"gsr\"\n     print(\"Community String: \" + cstring)\n-    rH = RequestHandler(\"gsr\")\n+    rH = RequestHandler(cstring)\n     rH.start()\n     \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1658662394258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,11 @@\n                 self.upTime = response\n                 \n             elif oid.split('.')[1] == \"7\":\n                 return self.hostname\n+            \n+            else:\n+                respons = \"Invalid Request\"\n         return response\n     \n     def setRequest(self, code, type, value):\n         if code.split('.')[1] == \"HWINFO\":\n"
                },
                {
                    "date": 1658662553707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n             value = data.split(' ')[4]\n             ret = self.setRequest(code, type, value)\n             \n         else :\n-            ret = \"Invalid SNMP request\"    \n+            ret = \"Invalid Request\"    \n         return ret\n     \n     def getRequest(self, oid):\n         response = \"\"\n@@ -86,9 +86,9 @@\n             elif oid.split('.')[1] == \"7\":\n                 return self.hostname\n             \n             else:\n-                respons = \"Invalid Request\"\n+                response = \"Invalid Request\"\n         return response\n     \n     def setRequest(self, code, type, value):\n         if code.split('.')[1] == \"HWINFO\":\n"
                },
                {
                    "date": 1658662644435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,53 +42,54 @@\n             value = data.split(' ')[4]\n             ret = self.setRequest(code, type, value)\n             \n         else :\n-            ret = \"Invalid Request\"    \n+            ret = \"Invalid SNMP Request\"    \n         return ret\n     \n     def getRequest(self, oid):\n         response = \"\"\n-        print(\"A processar get request com o OID: \" + oid)\n-        if oid.split('.')[0] == \"HWINFO\":\n-            if oid.split('.')[1] == \"1\":\n-               #make a subprocess call to execute the following command grep -m 1 \"model name\" /proc/cpuinfo' and get its output to a variable\n-                self.cpuInfo = subprocess.check_output(['grep', '-m', '1', 'model name', '/proc/cpuinfo']).decode().split(':')[1].strip()\n-                response = self.cpuInfo\n-                print(response)\n-               \n+        try:\n+            print(\"A processar get request com o OID: \" + oid)\n+            if oid.split('.')[0] == \"HWINFO\":\n+                if oid.split('.')[1] == \"1\":\n+                #make a subprocess call to execute the following command grep -m 1 \"model name\" /proc/cpuinfo' and get its output to a variable\n+                    self.cpuInfo = subprocess.check_output(['grep', '-m', '1', 'model name', '/proc/cpuinfo']).decode().split(':')[1].strip()\n+                    response = self.cpuInfo\n+                    print(response)\n                 \n-            elif oid.split('.')[1] == \"2\":\n-                #make a subprocess call to find the OS name and get its output to a variable\n-                self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n-                response = self.os\n-                \n-            elif oid.split('.')[1] == \"3\":\n-                #make a subproces call to find the total CPU usage and get its output to a variable\n-                self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n-                response = self.cpuUsage\n-                \n-            elif oid.split('.')[1] == \"4\":\n-                \n-                #make a subprocess call to get the output of free -m and get its output to a variable\n-                self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n-                response = self.availableRam\n-                \n-            elif oid.split('.')[1] == \"5\":\n-                #make a subprocess call to find the percentage of storage used and get its output to a variable\n-                self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n-                response = self.availableStorage\n-                \n-            elif oid.split('.')[1] == \"6\":\n-                #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n-                response = subprocess.check_output(['uptime', '-p']).decode().strip()\n-                self.upTime = response\n-                \n-            elif oid.split('.')[1] == \"7\":\n-                return self.hostname\n-            \n-            else:\n-                response = \"Invalid Request\"\n+                    \n+                elif oid.split('.')[1] == \"2\":\n+                    #make a subprocess call to find the OS name and get its output to a variable\n+                    self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n+                    response = self.os\n+                    \n+                elif oid.split('.')[1] == \"3\":\n+                    #make a subproces call to find the total CPU usage and get its output to a variable\n+                    self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n+                    response = self.cpuUsage\n+                    \n+                elif oid.split('.')[1] == \"4\":\n+                    \n+                    #make a subprocess call to get the output of free -m and get its output to a variable\n+                    self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n+                    response = self.availableRam\n+                    \n+                elif oid.split('.')[1] == \"5\":\n+                    #make a subprocess call to find the percentage of storage used and get its output to a variable\n+                    self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n+                    response = self.availableStorage\n+                    \n+                elif oid.split('.')[1] == \"6\":\n+                    #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n+                    response = subprocess.check_output(['uptime', '-p']).decode().strip()\n+                    self.upTime = response\n+                    \n+                elif oid.split('.')[1] == \"7\":\n+                    return self.hostname\n+        except Exception as e:\n+            print(e)\n+            response = \"Invalid SNMP Request\"\n         return response\n     \n     def setRequest(self, code, type, value):\n         if code.split('.')[1] == \"HWINFO\":\n"
                },
                {
                    "date": 1658666515125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,10 @@\n     \n     \n     def processRequest(self,data, addr):\n         \n-        if data.split(' ')[1] == \"get-request\":\n-            print(\"get-request....\")\n+        if data.split(' ')[1] == \"get-request\" or data.split(' ')[1] == \"get-bulk\":\n             oid = data.split(' ')[2]\n-            print(\"OID: \" + oid)\n             ret = self.getRequest(oid)\n                 \n         elif data.split(' ')[1] == \"get-next-request\":\n             code = data.split(' ')[2]\n"
                },
                {
                    "date": 1658666622016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,12 @@\n     \n     \n     def processRequest(self,data, addr):\n         \n-        if data.split(' ')[1] == \"get-request\" or data.split(' ')[1] == \"get-bulk\":\n+        if data.split(' ')[1] == \"get-request\" :\n+            print(\"get-request....\")\n             oid = data.split(' ')[2]\n+            print(\"OID: \" + oid)\n             ret = self.getRequest(oid)\n                 \n         elif data.split(' ')[1] == \"get-next-request\":\n             code = data.split(' ')[2]\n"
                },
                {
                    "date": 1658666644963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n             oid = data.split(' ')[2]\n             print(\"OID: \" + oid)\n             ret = self.getRequest(oid)\n                 \n-        elif data.split(' ')[1] == \"get-next-request\":\n+        elif data.split(' ')[1] == \"get-bulk\":\n             code = data.split(' ')[2]\n-            ret = self.getRequest(code)\n+            ret = self.getBulkRequest(code)\n                 \n         elif data.split(' ')[1] == \"set-request\":\n             code = data.split(' ')[2]\n             type = data.split(' ')[3]\n"
                },
                {
                    "date": 1658666783839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,18 @@\n         else :\n             ret = \"Invalid SNMP Request\"    \n         return ret\n     \n+    \n+    def getBulkRequest(self, oid):\n+        \n+        reponse = \"\"\n+        try:\n+            if oid.split('.')[0] == \"HWINFO\":\n+                if oid.split('.')[1] == \"0\":\n+                    response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n+    \n+    \n     def getRequest(self, oid):\n         response = \"\"\n         try:\n             print(\"A processar get request com o OID: \" + oid)\n"
                },
                {
                    "date": 1658666827342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,11 @@\n         try:\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"0\":\n                     response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n+        except:\n+            \n     \n-    \n     def getRequest(self, oid):\n         response = \"\"\n         try:\n             print(\"A processar get request com o OID: \" + oid)\n"
                },
                {
                    "date": 1658666873672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,15 +48,15 @@\n     \n     \n     def getBulkRequest(self, oid):\n         \n-        reponse = \"\"\n+        response = \"\"\n         try:\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"0\":\n                     response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n-        except:\n-            \n+        except Exception as e:\n+            response = \"Invalid SNMP Request\"\n     \n     def getRequest(self, oid):\n         response = \"\"\n         try:\n"
                },
                {
                    "date": 1658667054191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,38 @@\n         else :\n             ret = \"Invalid SNMP Request\"    \n         return ret\n     \n+    def getInfo(self, code):\n+        \n+        if code == \"1\":\n+            self.cpuInfo = subprocess.check_output(['grep', '-m', '1', 'model name', '/proc/cpuinfo']).decode().split(':')[1].strip()\n+        elif code == \"2\":\n+            self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n+        elif code == \"3\":\n+            self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n+        elif code == \"4\":\n+            self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n+        elif code == \"5\":\n+            self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n+        elif code == \"6\":\n+            self.upTime = subprocess.check_output(['uptime', '-p']).decode().strip()\n+        elif code == \"7\":\n+            return self.hostname\n+        elif code == \"0\":\n+            self.cpuInfo = subprocess.check_output(['grep', '-m', '1', 'model name', '/proc/cpuinfo']).decode().split(':')[1].strip()\n+            self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip() \n+            self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n+            self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n+            self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n+            self.upTime = subprocess.check_output(['uptime', '-p']).decode().strip()\n+            return self.hostname\n+        else:\n+            return \"Invalid SNMP Request\"\n+        \n     \n+    \n+    \n     def getBulkRequest(self, oid):\n         \n         response = \"\"\n         try:\n@@ -55,8 +84,9 @@\n                 if oid.split('.')[1] == \"0\":\n                     response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n         except Exception as e:\n             response = \"Invalid SNMP Request\"\n+        return response\n     \n     def getRequest(self, oid):\n         response = \"\"\n         try:\n"
                },
                {
                    "date": 1658667116396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n         response = \"\"\n         try:\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"0\":\n+                    self.getInfo(0)\n                     response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n         except Exception as e:\n             response = \"Invalid SNMP Request\"\n         return response\n"
                },
                {
                    "date": 1658667125214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         response = \"\"\n         try:\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"0\":\n-                    self.getInfo(0)\n+                    self.getInfo(\"0\")\n                     response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n         except Exception as e:\n             response = \"Invalid SNMP Request\"\n         return response\n"
                },
                {
                    "date": 1658667148560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,9 @@\n         try:\n             print(\"A processar get request com o OID: \" + oid)\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"1\":\n-                #make a subprocess call to execute the following command grep -m 1 \"model name\" /proc/cpuinfo' and get its output to a variable\n-                    self.cpuInfo = subprocess.check_output(['grep', '-m', '1', 'model name', '/proc/cpuinfo']).decode().split(':')[1].strip()\n+                    response = self.getInfo(\"1\")\n                     response = self.cpuInfo\n                     print(response)\n                 \n                     \n"
                },
                {
                    "date": 1658667283402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,37 +95,30 @@\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"1\":\n                     response = self.getInfo(\"1\")\n                     response = self.cpuInfo\n-                    print(response)\n                 \n                     \n                 elif oid.split('.')[1] == \"2\":\n-                    #make a subprocess call to find the OS name and get its output to a variable\n-                    self.os = subprocess.check_output(['grep', '-m', '1', 'PRETTY_NAME', '/etc/os-release']).decode().split('=')[1].strip()\n+                    response = self.getInfo(\"2\")\n                     response = self.os\n                     \n                 elif oid.split('.')[1] == \"3\":\n-                    #make a subproces call to find the total CPU usage and get its output to a variable\n-                    self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n+                    response = self.getInfo(\"3\")\n                     response = self.cpuUsage\n                     \n                 elif oid.split('.')[1] == \"4\":\n-                    \n-                    #make a subprocess call to get the output of free -m and get its output to a variable\n-                    self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n+                    response = self.getInfo(\"4\")\n                     response = self.availableRam\n                     \n                 elif oid.split('.')[1] == \"5\":\n-                    #make a subprocess call to find the percentage of storage used and get its output to a variable\n-                    self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n+                    response = self.getInfo(\"5\")\n                     response = self.availableStorage\n                     \n                 elif oid.split('.')[1] == \"6\":\n-                    #make a subprocess call to execute the following command uptime -p' and get its output to a variable\n-                    response = subprocess.check_output(['uptime', '-p']).decode().strip()\n-                    self.upTime = response\n-                    \n+                    response = self.getInfo(\"6\")\n+                    response = self.upTimes\n+                \n                 elif oid.split('.')[1] == \"7\":\n                     return self.hostname\n         except Exception as e:\n             print(e)\n"
                },
                {
                    "date": 1658667850627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n             if code.split('.')[2] == \"7\" and type == \"s\":\n                 self.hostname = value\n                 response = self.hostname\n             else:\n-                response = \"access denied!\"\n+                response = \"access denied! or wrong type!\"\n         return response\n \n \n     def run(self):\n"
                },
                {
                    "date": 1658747855623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n             response = \"Invalid SNMP Request\"\n         return response\n     \n     def setRequest(self, code, type, value):\n+        print(\"TRYING TO SET\")\n         if code.split('.')[1] == \"HWINFO\":\n             if code.split('.')[2] == \"7\" and type == \"s\":\n                 self.hostname = value\n                 response = self.hostname\n"
                },
                {
                    "date": 1658747890665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n         return response\n     \n     def setRequest(self, code, type, value):\n         print(\"TRYING TO SET\")\n+        response = \"\"\n         if code.split('.')[1] == \"HWINFO\":\n             if code.split('.')[2] == \"7\" and type == \"s\":\n                 self.hostname = value\n                 response = self.hostname\n"
                },
                {
                    "date": 1658747987112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n         response = \"\"\n         if code.split('.')[1] == \"HWINFO\":\n             if code.split('.')[2] == \"7\" and type == \"s\":\n                 self.hostname = value\n-                response = self.hostname\n+                response = \"Hostname changed to \" + self.hostname \n             else:\n                 response = \"access denied! or wrong type!\"\n         return response\n \n"
                },
                {
                    "date": 1658748099195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,10 @@\n         response = \"\"\n         if code.split('.')[1] == \"HWINFO\":\n             if code.split('.')[2] == \"7\" and type == \"s\":\n                 self.hostname = value\n-                response = \"Hostname changed to \" + self.hostname \n+                response = \"Hostname changed to \" + self.hostname\n+                print(\"Response: \" + response)\n             else:\n                 response = \"access denied! or wrong type!\"\n         return response\n \n"
                },
                {
                    "date": 1658748221067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n             ret = self.getBulkRequest(code)\n                 \n         elif data.split(' ')[1] == \"set-request\":\n             code = data.split(' ')[2]\n-            type = data.split(' ')[3]\n+            typeR = data.split(' ')[3]\n             value = data.split(' ')[4]\n-            ret = self.setRequest(code, type, value)\n+            ret = self.setRequest(code, typeR, value)\n             \n         else :\n             ret = \"Invalid SNMP Request\"    \n         return ret\n@@ -124,13 +124,13 @@\n             print(e)\n             response = \"Invalid SNMP Request\"\n         return response\n     \n-    def setRequest(self, code, type, value):\n+    def setRequest(self, code, typeR, value):\n         print(\"TRYING TO SET\")\n         response = \"\"\n         if code.split('.')[1] == \"HWINFO\":\n-            if code.split('.')[2] == \"7\" and type == \"s\":\n+            if code.split('.')[2] == \"7\" and typeR == \"s\":\n                 self.hostname = value\n                 response = \"Hostname changed to \" + self.hostname\n                 print(\"Response: \" + response)\n             else:\n"
                },
                {
                    "date": 1658748301914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n                 response = \"Hostname changed to \" + self.hostname\n                 print(\"Response: \" + response)\n             else:\n                 response = \"access denied! or wrong type!\"\n+        print(response)\n         return response\n \n \n     def run(self):\n"
                },
                {
                    "date": 1658748338156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n             response = \"Invalid SNMP Request\"\n         return response\n     \n     def setRequest(self, code, typeR, value):\n+        print(\"code: \" + code + \" typeR: \" + typeR + \" value: \" + value)\n         print(\"TRYING TO SET\")\n         response = \"\"\n         if code.split('.')[1] == \"HWINFO\":\n             if code.split('.')[2] == \"7\" and typeR == \"s\":\n"
                },
                {
                    "date": 1658748628180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,10 @@\n     def setRequest(self, code, typeR, value):\n         print(\"code: \" + code + \" typeR: \" + typeR + \" value: \" + value)\n         print(\"TRYING TO SET\")\n         response = \"\"\n-        if code.split('.')[1] == \"HWINFO\":\n-            if code.split('.')[2] == \"7\" and typeR == \"s\":\n+        if code.split('.')[0] == \"HWINFO\":\n+            if code.split('.')[1] == \"7\" and typeR == \"s\":\n                 self.hostname = value\n                 response = \"Hostname changed to \" + self.hostname\n                 print(\"Response: \" + response)\n             else:\n"
                },
                {
                    "date": 1658748742759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,8 @@\n             self.cpuUsage = \"CPU Usage: \" + str(psutil.cpu_percent()) + \"%\"\n             self.availableRam = \"RAM Usage: \" + str(psutil.virtual_memory().percent) + \"%\"\n             self.availableStorage = \"Storage Usage: \" + str(psutil.disk_usage('/').percent) + \"%\"\n             self.upTime = subprocess.check_output(['uptime', '-p']).decode().strip()\n-            return self.hostname\n         else:\n             return \"Invalid SNMP Request\"\n         \n     \n"
                },
                {
                    "date": 1658748795197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n         try:\n             if oid.split('.')[0] == \"HWINFO\":\n                 if oid.split('.')[1] == \"0\":\n                     self.getInfo(\"0\")\n-                    response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\"\n+                    response = \"CPU INFO: \" + self.cpuInfo + \"\\n\" + \"OS: \" + self.os + \"\\n\" + \"CPU Usage: \" + self.cpuUsage + \"\\n\" + \"Available RAM: \" + self.availableRam + \"\\n\" + \"Available Storage: \" + self.availableStorage + \"\\n\" + \"Up Time: \" + self.upTime + \"\\n\" + \"Hostname: \" + self.hostname\n         except Exception as e:\n             response = \"Invalid SNMP Request\"\n         return response\n     \n"
                },
                {
                    "date": 1658778431048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         self.ip = '127.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-        self.targetProxy = \"\"\n+        self.targetProxy = \"127.0.0.3\"\n         self.cstring = cstring\n         self.cpuInfo = \"\"\n         self.os = \"\"\n         self.cpuUsage = \"\"\n@@ -142,13 +142,16 @@\n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n-                data = data.decode()\n-                print(data)\n-                if data.split(' ')[0] == self.cstring:\n-                    response = self.processRequest(data, addr[0])\n-                    self.socket.sendto(response.encode(), addr)\n+                if addr[0] == self.targetProxy and addr[1] == self.targetPort:\n+                    data = data.decode()\n+                    print(data)\n+                    if data.split(' ')[0] == self.cstring:\n+                        response = self.processRequest(data, addr[0])\n+                        self.socket.sendto(response.encode(), addr)\n+                else:\n+                    pass\n                     \n                 \n         except Exception as e:\n             print(e)\n@@ -156,11 +159,16 @@\n \n \n \n \n+class trappHAndler(threading.thread):\n+    def __init__(self):\n+        self.port = 161\n+        self.ip = \n \n \n \n+\n def main():\n     global MIB\n     print(\"A Inicializar agente SNMP...\")\n     #clear terminal\n"
                },
                {
                    "date": 1658778615283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,12 +159,24 @@\n \n \n \n \n-class trappHAndler(threading.thread):\n+class trapHAndler(threading.thread):\n     def __init__(self):\n-        self.port = 161\n-        self.ip = \n+        threading.Thread.__init__(self)\n+        self.port = 162\n+        self.ip = '127.0.0.2'\n+        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n+        self.socket.bind((self.ip, self.port))\n+        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        \n+        \n+    def run(self):\n+        \n+        while True:\n+            time.sleep(10)\n+            self.socket.sendto(\"CPU USAGE SPIKE\".encode(), (self.ip, self.port))\n+            \n \n \n \n \n"
                },
                {
                    "date": 1658778816533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,10 +172,12 @@\n         \n     def run(self):\n         \n         while True:\n+            #generate a number between 0 and 3\n+            r = random.randint(0,3)\n             time.sleep(10)\n-            self.socket.sendto(\"CPU USAGE SPIKE\".encode(), (self.ip, self.port))\n+            self.socket.sendto(\"cpu usage down\".encode(), (self.ip, self.port))\n             \n \n \n \n"
                },
                {
                    "date": 1658778847373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,10 +174,12 @@\n         \n         while True:\n             #generate a number between 0 and 3\n             r = random.randint(0,3)\n+            traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n-            self.socket.sendto(\"cpu usage down\".encode(), (self.ip, self.port))\n+            msg = traps[r]\n+            self.socket.sendto(msg.encode(), (self.ip, self.port))\n             \n \n \n \n"
                },
                {
                    "date": 1658778869746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,11 @@\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n             msg = traps[r]\n             self.socket.sendto(msg.encode(), (self.ip, self.port))\n-            \n+            data, addr = self.socket.recvfrom(4096)\n+                if data.decode() == 'trap-ack':\n+                    print(\"Trap ack received\")\n \n \n \n \n"
                },
                {
                    "date": 1658778877941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,10 +179,10 @@\n             time.sleep(10)\n             msg = traps[r]\n             self.socket.sendto(msg.encode(), (self.ip, self.port))\n             data, addr = self.socket.recvfrom(4096)\n-                if data.decode() == 'trap-ack':\n-                    print(\"Trap ack received\")\n+            if data.decode() == 'trap-ack':\n+                print(\"Trap ack received\")\n \n \n \n \n"
                },
                {
                    "date": 1658778884398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,8 +181,10 @@\n             self.socket.sendto(msg.encode(), (self.ip, self.port))\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == 'trap-ack':\n                 print(\"Trap ack received\")\n+            else:\n+                pass\n \n \n \n \n"
                },
                {
                    "date": 1658778906715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n             #generate a number between 0 and 3\n             r = random.randint(0,3)\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n-            msg = traps[r]\n+            msg = \"trap\" + \" \" + traps[r]\n             self.socket.sendto(msg.encode(), (self.ip, self.port))\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == 'trap-ack':\n                 print(\"Trap ack received\")\n"
                },
                {
                    "date": 1658778913857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n             #generate a number between 0 and 3\n             r = random.randint(0,3)\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n-            msg = \"trap\" + \" \" + traps[r]\n+            msg = \"trap\" + \" \" + str(traps[r])\n             self.socket.sendto(msg.encode(), (self.ip, self.port))\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == 'trap-ack':\n                 print(\"Trap ack received\")\n"
                },
                {
                    "date": 1658830507963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,11 @@\n     cstring = \"gsr\"\n     print(\"Community String: \" + cstring)\n     rH = RequestHandler(cstring)\n     rH.start()\n+    time.sleep(5)\n     \n+    \n if __name__ == \"__main__\":\n     main()\n \n     \n"
                },
                {
                    "date": 1658830516968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,8 +198,10 @@\n     print(\"Community String: \" + cstring)\n     rH = RequestHandler(cstring)\n     rH.start()\n     time.sleep(5)\n+    tH = trapHAndler()\n+    th.start()\n     \n     \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1658830541891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,16 +5,16 @@\n mibVals = []\n \n \n class RequestHandler(threading.Thread):\n-    def __init__(self, cstring):\n+    def __init__(self, cstring, targetproxy):\n         threading.Thread.__init__(self)\n         self.port = 161\n         self.ip = '127.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-        self.targetProxy = \"127.0.0.3\"\n+        self.targetProxy = targetproxy\n         self.cstring = cstring\n         self.cpuInfo = \"\"\n         self.os = \"\"\n         self.cpuUsage = \"\"\n@@ -199,9 +199,9 @@\n     rH = RequestHandler(cstring)\n     rH.start()\n     time.sleep(5)\n     tH = trapHAndler()\n-    th.start()\n+    tH.start()\n     \n     \n if __name__ == \"__main__\":\n     main()\n"
                },
                {
                    "date": 1658830563208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,11 +196,12 @@\n     MIB = json.load(open('MIBAgent.json'))\n     cstring = \"gsr\"\n     print(\"Community String: \" + cstring)\n     rH = RequestHandler(cstring)\n-    rH.start()\n+    targetProxy = \"127.0.0.3\"\n+    rH.start(targetProxy)\n     time.sleep(5)\n-    tH = trapHAndler()\n+    tH = trapHAndler(targetProxy)\n     tH.start()\n     \n     \n if __name__ == \"__main__\":\n"
                },
                {
                    "date": 1658830619218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,26 +160,26 @@\n \n \n \n class trapHAndler(threading.thread):\n-    def __init__(self):\n+    def __init__(self, targetProxy):\n         threading.Thread.__init__(self)\n         self.port = 162\n         self.ip = '127.0.0.2'\n         self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n         self.socket.bind((self.ip, self.port))\n         self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n+        self.targetProxy = targetProxy\n         \n-        \n     def run(self):\n         \n         while True:\n             #generate a number between 0 and 3\n             r = random.randint(0,3)\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n             msg = \"trap\" + \" \" + str(traps[r])\n-            self.socket.sendto(msg.encode(), (self.ip, self.port))\n+            self.socket.sendto(msg.encode(), (self.targetProxy, self.port))\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == 'trap-ack':\n                 print(\"Trap ack received\")\n             else:\n"
                },
                {
                    "date": 1658831113228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,9 +159,9 @@\n \n \n \n \n-class trapHAndler(threading.thread):\n+class trapHAndler(threading.Thread):\n     def __init__(self, targetProxy):\n         threading.Thread.__init__(self)\n         self.port = 162\n         self.ip = '127.0.0.2'\n"
                },
                {
                    "date": 1658831443028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n     cstring = \"gsr\"\n     print(\"Community String: \" + cstring)\n     rH = RequestHandler(cstring)\n     targetProxy = \"127.0.0.3\"\n-    rH.start(targetProxy)\n+    rH.start(cstring,targetProxy)\n     time.sleep(5)\n     tH = trapHAndler(targetProxy)\n     tH.start()\n     \n"
                },
                {
                    "date": 1658831483800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,11 +195,12 @@\n     os.system('cls' if os.name == 'nt' else 'clear')\n     MIB = json.load(open('MIBAgent.json'))\n     cstring = \"gsr\"\n     print(\"Community String: \" + cstring)\n-    rH = RequestHandler(cstring)\n+    \n     targetProxy = \"127.0.0.3\"\n-    rH.start(cstring,targetProxy)\n+    rH = RequestHandler(cstring, targetProxy)\n+    rH.start()\n     time.sleep(5)\n     tH = trapHAndler(targetProxy)\n     tH.start()\n     \n"
                },
                {
                    "date": 1658831533855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     def run(self):\n         \n         while True:\n             #generate a number between 0 and 3\n-            r = random.randint(0,3)\n+            r = random.randint(0,2)\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n             msg = \"trap\" + \" \" + str(traps[r])\n             self.socket.sendto(msg.encode(), (self.targetProxy, self.port))\n"
                },
                {
                    "date": 1658831575673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,8 +178,9 @@\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n             msg = \"trap\" + \" \" + str(traps[r])\n             self.socket.sendto(msg.encode(), (self.targetProxy, self.port))\n+            print(\"trap enviada\")\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == 'trap-ack':\n                 print(\"Trap ack received\")\n             else:\n"
                },
                {
                    "date": 1658833220480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n     def run(self):\n         try:\n             while True:        \n                 data, addr = self.socket.recvfrom(4096)\n-                if addr[0] == self.targetProxy and addr[1] == self.targetPort:\n+                if addr[0] == self.targetProxy and addr[1] == self.port:\n                     data = data.decode()\n                     print(data)\n                     if data.split(' ')[0] == self.cstring:\n                         response = self.processRequest(data, addr[0])\n@@ -178,9 +178,9 @@\n             traps = [\"cpu usage spike!\", \"ram usage spike!\", \"storage usage spike!\"]\n             time.sleep(10)\n             msg = \"trap\" + \" \" + str(traps[r])\n             self.socket.sendto(msg.encode(), (self.targetProxy, self.port))\n-            print(\"trap enviada\")\n+            print(\"trap enviada para \" + self.targetProxy)\n             data, addr = self.socket.recvfrom(4096)\n             if data.decode() == 'trap-ack':\n                 print(\"Trap ack received\")\n             else:\n"
                }
            ],
            "date": 1658393959989,
            "name": "Commit-0",
            "content": "import threading, sys, time, random, os, socket\n\n\n\nclass SNMPAgent():\n    def __init__(self):\n        threading.Thread.__init__(self)\n        self.requestPort = 161\n        self.trapPort = 162 \n        self.requestSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.trapSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.requestSocket.bind(('', self.requestPort))\n        self.trapSocket.bind(('', self.trapPort))\n        self.requestSocket.settimeout(1)\n        self.trapSocket.settimeout(1)\n        \n        \n    def init(self):\n        rH = requestHandler(self.requestPort, self.requestSocket)\n        rH.start()        \n        \nclass requestHandler(threading.Thread):\n    def __init__(self, port, socket):\n        threading.Thread.__init__(self)\n        self.port = port\n        self.socket = socket\n        self.targetProxy = \"\"\n    def run(self):\n        print(\"Bem Vindo ao SNMP Manager\")\n        self.socket.sendto(\"\")"
        }
    ]
}