{
    "sourceFile": "rsaKeysGenerator.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1658765646570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1658765705167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,31 @@\n import rsa, json, os\n \n \n def main():\n-    #load the keys.py file into a dictionary\n+    #ler ficheiro de configuração\n \n     usersKeys= json.load(open('keys.json'))\n     \n-    #for each entry in the usersKeys dictionary, generate a public and private key\n+    #para cada utilizador criar uma chave privada e publica\n     \n     for key in usersKeys:\n         \n         public_key,private_key = rsa.newkeys(512)\n         \n         usersKeys[key][\"publicKey\"] = public_key\n         usersKeys[key][\"privateKey\"] = private_key\n         \n+    #store das keys\n+\n+    with open('keys.json', 'w') as outfile:\n+        json.dump(usersKeys, outfile)\n+\n+    print(\"keys generated\")\n+    \n+    \n+if __name__ == \"__main__\":\n+\n+    main()\n+\n+        \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1658766430606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,20 @@\n import rsa, json, os\n \n \n def main():\n-    #ler ficheiro de configuração\n-\n-    usersKeys= json.load(open('keys.json'))\n     \n-    #para cada utilizador criar uma chave privada e publica\n+    public_key, private_key = rsa.newkeys(1024)\n     \n-    for key in usersKeys:\n-        \n-        public_key,private_key = rsa.newkeys(512)\n-        \n-        usersKeys[key][\"publicKey\"] = public_key\n-        usersKeys[key][\"privateKey\"] = private_key\n-        \n-    #store das keys\n+    #write keys to files\n+    with open(\"public_key.pem\", \"wb\") as f:\n+        f.write(public_key.save_pkcs1())\n+    with open(\"private_key.pem\", \"wb\") as f:\n+        f.write(private_key.save_pkcs1())\n \n-    with open('keys.json', 'w') as outfile:\n-        json.dump(usersKeys, outfile)\n-\n-    print(\"keys generated\")\n     \n     \n+    \n if __name__ == \"__main__\":\n \n     main()\n \n"
                },
                {
                    "date": 1658768457009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,19 +2,17 @@\n \n \n def main():\n     \n-    public_key, private_key = rsa.newkeys(1024)\n+    public_key, private_key = rsa.newkeys(2048)\n     \n     #write keys to files\n     with open(\"public_key.pem\", \"wb\") as f:\n         f.write(public_key.save_pkcs1())\n     with open(\"private_key.pem\", \"wb\") as f:\n         f.write(private_key.save_pkcs1())\n-\n     \n     \n-    \n if __name__ == \"__main__\":\n \n     main()\n \n"
                }
            ],
            "date": 1658765646570,
            "name": "Commit-0",
            "content": "import rsa, json, os\n\n\ndef main():\n    #load the keys.py file into a dictionary\n\n    usersKeys= json.load(open('keys.json'))\n    \n    #for each entry in the usersKeys dictionary, generate a public and private key\n    \n    for key in usersKeys:\n        \n        public_key,private_key = rsa.newkeys(512)\n        \n        usersKeys[key][\"publicKey\"] = public_key\n        usersKeys[key][\"privateKey\"] = private_key\n        \n    "
        }
    ]
}